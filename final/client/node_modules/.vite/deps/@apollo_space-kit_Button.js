import {
  require_LoadingSpinner,
  require_SpaceKitProvider
} from "./chunk-5XB2JOVE.js";
import {
  require_colors
} from "./chunk-E4JUMG7I.js";
import {
  require_tslib_bcbe0269
} from "./chunk-FAS6PWZ4.js";
import {
  core_browser_esm_exports,
  init_core_browser_esm
} from "./chunk-JXYOUZYI.js";
import {
  require_react
} from "./chunk-QMLEULWO.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-ROME4SDB.js";

// node_modules/@apollo/space-kit/fonts/fonts.js
var require_fonts = __commonJS({
  "node_modules/@apollo/space-kit/fonts/fonts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var base = "'Source Sans Pro', sans-serif";
    var mono = "'Source Code Pro', monospace";
    exports.base = base;
    exports.mono = mono;
  }
});

// node_modules/@apollo/space-kit/base-91f9e1df.js
var require_base_91f9e1df = __commonJS({
  "node_modules/@apollo/space-kit/base-91f9e1df.js"(exports) {
    "use strict";
    var fonts = require_fonts();
    var xxxlarge = {
      fontFamily: fonts.base,
      fontSize: 31,
      fontWeight: 600,
      lineHeight: 1.35
    };
    var xxlarge = {
      fontFamily: fonts.base,
      fontSize: 26,
      fontWeight: 600,
      lineHeight: 1.23
    };
    var xlarge = {
      fontFamily: fonts.base,
      fontSize: 22,
      fontWeight: 600,
      lineHeight: 1.5
    };
    var large = {
      fontFamily: fonts.base,
      fontSize: 18,
      lineHeight: 1.5
    };
    var base = {
      fontFamily: fonts.base,
      fontSize: 15,
      lineHeight: 1.53
    };
    var small = {
      fontFamily: fonts.base,
      fontSize: 13,
      lineHeight: 1.54
    };
    var xsmall = {
      fontFamily: fonts.base,
      fontSize: 11,
      lineHeight: 1.55
    };
    var base$1 = Object.freeze({
      __proto__: null,
      xxxlarge,
      xxlarge,
      xlarge,
      large,
      base,
      small,
      xsmall
    });
    exports.base = base;
    exports.base$1 = base$1;
    exports.large = large;
    exports.small = small;
    exports.xlarge = xlarge;
    exports.xsmall = xsmall;
    exports.xxlarge = xxlarge;
    exports.xxxlarge = xxxlarge;
  }
});

// node_modules/@apollo/space-kit/mono-a0d4bd30.js
var require_mono_a0d4bd30 = __commonJS({
  "node_modules/@apollo/space-kit/mono-a0d4bd30.js"(exports) {
    "use strict";
    var _tslib = require_tslib_bcbe0269();
    var fonts = require_fonts();
    var base$1 = require_base_91f9e1df();
    var large = _tslib.__assign(_tslib.__assign({}, base$1.large), {
      fontFamily: fonts.mono
    });
    var base = _tslib.__assign(_tslib.__assign({}, base$1.base), {
      fontFamily: fonts.mono
    });
    var small = _tslib.__assign(_tslib.__assign({}, base$1.small), {
      fontFamily: fonts.mono
    });
    var xsmall = _tslib.__assign(_tslib.__assign({}, base$1.xsmall), {
      fontFamily: fonts.mono
    });
    var mono = Object.freeze({
      __proto__: null,
      large,
      base,
      small,
      xsmall
    });
    exports.base = base;
    exports.large = large;
    exports.mono = mono;
    exports.small = small;
    exports.xsmall = xsmall;
  }
});

// node_modules/@apollo/space-kit/assertUnreachable-698a501a.js
var require_assertUnreachable_698a501a = __commonJS({
  "node_modules/@apollo/space-kit/assertUnreachable-698a501a.js"(exports) {
    "use strict";
    function assertUnreachable(value) {
      throw new TypeError("Unreachable value reached " + value);
    }
    exports.assertUnreachable = assertUnreachable;
  }
});

// node_modules/@apollo/space-kit/colors/utils/findPaletteByColor.js
var require_findPaletteByColor = __commonJS({
  "node_modules/@apollo/space-kit/colors/utils/findPaletteByColor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var colors = require_colors();
    function findPaletteByColor(searchColor) {
      var result = Object.values(colors.colors).filter(function(color) {
        return typeof color !== "string";
      }).find(
        // We need to declare the result of the `filter` function's callback to
        // tell TypeScript we are narrowing the type. By default,
        // `Array.prototype.filter` has the same return type as it's given as an
        // input; we're explicitly doing something different here.
        // @see https://github.com/Microsoft/TypeScript/issues/7657#issuecomment-228697078
        function(color) {
          return Object.values(color).includes(searchColor);
        }
      );
      if (!result) {
        throw new Error("Could not find color in palette");
      }
      return result;
    }
    exports.findPaletteByColor = findPaletteByColor;
  }
});

// node_modules/@apollo/space-kit/colors/utils/getOffsetInPalette.js
var require_getOffsetInPalette = __commonJS({
  "node_modules/@apollo/space-kit/colors/utils/getOffsetInPalette.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _tslib = require_tslib_bcbe0269();
    require_colors();
    var findPaletteByColor = require_findPaletteByColor();
    var monochromePaletteKeys = ["darker", "dark", "base", "light", "lighter"];
    var colorPaletteKeys = _tslib.__spreadArrays(["darkest"], monochromePaletteKeys, ["lightest"]);
    function isColorPalette(palette) {
      return Object.prototype.hasOwnProperty.call(palette, "darkest");
    }
    function getOffsetInPalette(offset, offsetDirection, color) {
      var palette = findPaletteByColor.findPaletteByColor(color);
      var effectiveOffset = offsetDirection === "lighter" ? offset : -offset;
      if (isColorPalette(palette)) {
        var index_1 = Object.keys(palette).findIndex(function(paletteKey) {
          return palette[paletteKey] === color;
        });
        return palette[colorPaletteKeys[Math.min(Object.keys(palette).length - 1, Math.max(0, index_1 + effectiveOffset))]];
      }
      var index = Object.keys(palette).findIndex(function(paletteKey) {
        return palette[paletteKey] === color;
      });
      return palette[monochromePaletteKeys[Math.min(Object.keys(palette).length - 1, Math.max(0, index + effectiveOffset))]];
    }
    exports.getOffsetInPalette = getOffsetInPalette;
  }
});

// node_modules/tinycolor2/cjs/tinycolor.js
var require_tinycolor = __commonJS({
  "node_modules/tinycolor2/cjs/tinycolor.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2.tinycolor = factory());
    })(exports, function() {
      "use strict";
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      var trimLeft = /^\s+/;
      var trimRight = /\s+$/;
      function tinycolor(color, opts) {
        color = color ? color : "";
        opts = opts || {};
        if (color instanceof tinycolor) {
          return color;
        }
        if (!(this instanceof tinycolor)) {
          return new tinycolor(color, opts);
        }
        var rgb = inputToRGB(color);
        this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;
        this._gradientType = opts.gradientType;
        if (this._r < 1)
          this._r = Math.round(this._r);
        if (this._g < 1)
          this._g = Math.round(this._g);
        if (this._b < 1)
          this._b = Math.round(this._b);
        this._ok = rgb.ok;
      }
      tinycolor.prototype = {
        isDark: function isDark() {
          return this.getBrightness() < 128;
        },
        isLight: function isLight() {
          return !this.isDark();
        },
        isValid: function isValid() {
          return this._ok;
        },
        getOriginalInput: function getOriginalInput() {
          return this._originalInput;
        },
        getFormat: function getFormat() {
          return this._format;
        },
        getAlpha: function getAlpha() {
          return this._a;
        },
        getBrightness: function getBrightness() {
          var rgb = this.toRgb();
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
        },
        getLuminance: function getLuminance() {
          var rgb = this.toRgb();
          var RsRGB, GsRGB, BsRGB, R, G, B;
          RsRGB = rgb.r / 255;
          GsRGB = rgb.g / 255;
          BsRGB = rgb.b / 255;
          if (RsRGB <= 0.03928)
            R = RsRGB / 12.92;
          else
            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
          if (GsRGB <= 0.03928)
            G = GsRGB / 12.92;
          else
            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
          if (BsRGB <= 0.03928)
            B = BsRGB / 12.92;
          else
            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
          return 0.2126 * R + 0.7152 * G + 0.0722 * B;
        },
        setAlpha: function setAlpha(value) {
          this._a = boundAlpha(value);
          this._roundA = Math.round(100 * this._a) / 100;
          return this;
        },
        toHsv: function toHsv() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          return {
            h: hsv.h * 360,
            s: hsv.s,
            v: hsv.v,
            a: this._a
          };
        },
        toHsvString: function toHsvString() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          var h = Math.round(hsv.h * 360), s = Math.round(hsv.s * 100), v = Math.round(hsv.v * 100);
          return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
        },
        toHsl: function toHsl() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          return {
            h: hsl.h * 360,
            s: hsl.s,
            l: hsl.l,
            a: this._a
          };
        },
        toHslString: function toHslString() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          var h = Math.round(hsl.h * 360), s = Math.round(hsl.s * 100), l = Math.round(hsl.l * 100);
          return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
        },
        toHex: function toHex(allow3Char) {
          return rgbToHex(this._r, this._g, this._b, allow3Char);
        },
        toHexString: function toHexString(allow3Char) {
          return "#" + this.toHex(allow3Char);
        },
        toHex8: function toHex8(allow4Char) {
          return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
        },
        toHex8String: function toHex8String(allow4Char) {
          return "#" + this.toHex8(allow4Char);
        },
        toRgb: function toRgb() {
          return {
            r: Math.round(this._r),
            g: Math.round(this._g),
            b: Math.round(this._b),
            a: this._a
          };
        },
        toRgbString: function toRgbString() {
          return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
        },
        toPercentageRgb: function toPercentageRgb() {
          return {
            r: Math.round(bound01(this._r, 255) * 100) + "%",
            g: Math.round(bound01(this._g, 255) * 100) + "%",
            b: Math.round(bound01(this._b, 255) * 100) + "%",
            a: this._a
          };
        },
        toPercentageRgbString: function toPercentageRgbString() {
          return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
        },
        toName: function toName() {
          if (this._a === 0) {
            return "transparent";
          }
          if (this._a < 1) {
            return false;
          }
          return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
        },
        toFilter: function toFilter(secondColor) {
          var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
          var secondHex8String = hex8String;
          var gradientType = this._gradientType ? "GradientType = 1, " : "";
          if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
          }
          return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
        },
        toString: function toString(format) {
          var formatSet = !!format;
          format = format || this._format;
          var formattedString = false;
          var hasAlpha = this._a < 1 && this._a >= 0;
          var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
          if (needsAlphaFormat) {
            if (format === "name" && this._a === 0) {
              return this.toName();
            }
            return this.toRgbString();
          }
          if (format === "rgb") {
            formattedString = this.toRgbString();
          }
          if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
          }
          if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
          }
          if (format === "hex3") {
            formattedString = this.toHexString(true);
          }
          if (format === "hex4") {
            formattedString = this.toHex8String(true);
          }
          if (format === "hex8") {
            formattedString = this.toHex8String();
          }
          if (format === "name") {
            formattedString = this.toName();
          }
          if (format === "hsl") {
            formattedString = this.toHslString();
          }
          if (format === "hsv") {
            formattedString = this.toHsvString();
          }
          return formattedString || this.toHexString();
        },
        clone: function clone() {
          return tinycolor(this.toString());
        },
        _applyModification: function _applyModification(fn, args) {
          var color = fn.apply(null, [this].concat([].slice.call(args)));
          this._r = color._r;
          this._g = color._g;
          this._b = color._b;
          this.setAlpha(color._a);
          return this;
        },
        lighten: function lighten() {
          return this._applyModification(_lighten, arguments);
        },
        brighten: function brighten() {
          return this._applyModification(_brighten, arguments);
        },
        darken: function darken() {
          return this._applyModification(_darken, arguments);
        },
        desaturate: function desaturate() {
          return this._applyModification(_desaturate, arguments);
        },
        saturate: function saturate() {
          return this._applyModification(_saturate, arguments);
        },
        greyscale: function greyscale() {
          return this._applyModification(_greyscale, arguments);
        },
        spin: function spin() {
          return this._applyModification(_spin, arguments);
        },
        _applyCombination: function _applyCombination(fn, args) {
          return fn.apply(null, [this].concat([].slice.call(args)));
        },
        analogous: function analogous() {
          return this._applyCombination(_analogous, arguments);
        },
        complement: function complement() {
          return this._applyCombination(_complement, arguments);
        },
        monochromatic: function monochromatic() {
          return this._applyCombination(_monochromatic, arguments);
        },
        splitcomplement: function splitcomplement() {
          return this._applyCombination(_splitcomplement, arguments);
        },
        // Disabled until https://github.com/bgrins/TinyColor/issues/254
        // polyad: function (number) {
        //   return this._applyCombination(polyad, [number]);
        // },
        triad: function triad() {
          return this._applyCombination(polyad, [3]);
        },
        tetrad: function tetrad() {
          return this._applyCombination(polyad, [4]);
        }
      };
      tinycolor.fromRatio = function(color, opts) {
        if (_typeof(color) == "object") {
          var newColor = {};
          for (var i in color) {
            if (color.hasOwnProperty(i)) {
              if (i === "a") {
                newColor[i] = color[i];
              } else {
                newColor[i] = convertToPercentage(color[i]);
              }
            }
          }
          color = newColor;
        }
        return tinycolor(color, opts);
      };
      function inputToRGB(color) {
        var rgb = {
          r: 0,
          g: 0,
          b: 0
        };
        var a = 1;
        var s = null;
        var v = null;
        var l = null;
        var ok = false;
        var format = false;
        if (typeof color == "string") {
          color = stringInputToObject(color);
        }
        if (_typeof(color) == "object") {
          if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
          } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);
            v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, s, v);
            ok = true;
            format = "hsv";
          } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);
            l = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, s, l);
            ok = true;
            format = "hsl";
          }
          if (color.hasOwnProperty("a")) {
            a = color.a;
          }
        }
        a = boundAlpha(a);
        return {
          ok,
          format: color.format || format,
          r: Math.min(255, Math.max(rgb.r, 0)),
          g: Math.min(255, Math.max(rgb.g, 0)),
          b: Math.min(255, Math.max(rgb.b, 0)),
          a
        };
      }
      function rgbToRgb(r2, g, b) {
        return {
          r: bound01(r2, 255) * 255,
          g: bound01(g, 255) * 255,
          b: bound01(b, 255) * 255
        };
      }
      function rgbToHsl(r2, g, b) {
        r2 = bound01(r2, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = Math.max(r2, g, b), min = Math.min(r2, g, b);
        var h, s, l = (max + min) / 2;
        if (max == min) {
          h = s = 0;
        } else {
          var d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          switch (max) {
            case r2:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;
            case g:
              h = (b - r2) / d + 2;
              break;
            case b:
              h = (r2 - g) / d + 4;
              break;
          }
          h /= 6;
        }
        return {
          h,
          s,
          l
        };
      }
      function hslToRgb(h, s, l) {
        var r2, g, b;
        h = bound01(h, 360);
        s = bound01(s, 100);
        l = bound01(l, 100);
        function hue2rgb(p2, q2, t) {
          if (t < 0)
            t += 1;
          if (t > 1)
            t -= 1;
          if (t < 1 / 6)
            return p2 + (q2 - p2) * 6 * t;
          if (t < 1 / 2)
            return q2;
          if (t < 2 / 3)
            return p2 + (q2 - p2) * (2 / 3 - t) * 6;
          return p2;
        }
        if (s === 0) {
          r2 = g = b = l;
        } else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r2 = hue2rgb(p, q, h + 1 / 3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1 / 3);
        }
        return {
          r: r2 * 255,
          g: g * 255,
          b: b * 255
        };
      }
      function rgbToHsv(r2, g, b) {
        r2 = bound01(r2, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = Math.max(r2, g, b), min = Math.min(r2, g, b);
        var h, s, v = max;
        var d = max - min;
        s = max === 0 ? 0 : d / max;
        if (max == min) {
          h = 0;
        } else {
          switch (max) {
            case r2:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;
            case g:
              h = (b - r2) / d + 2;
              break;
            case b:
              h = (r2 - g) / d + 4;
              break;
          }
          h /= 6;
        }
        return {
          h,
          s,
          v
        };
      }
      function hsvToRgb(h, s, v) {
        h = bound01(h, 360) * 6;
        s = bound01(s, 100);
        v = bound01(v, 100);
        var i = Math.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i % 6, r2 = [v, q, p, p, t, v][mod], g = [t, v, v, q, p, p][mod], b = [p, p, t, v, v, q][mod];
        return {
          r: r2 * 255,
          g: g * 255,
          b: b * 255
        };
      }
      function rgbToHex(r2, g, b, allow3Char) {
        var hex = [pad2(Math.round(r2).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
        }
        return hex.join("");
      }
      function rgbaToHex(r2, g, b, a, allow4Char) {
        var hex = [pad2(Math.round(r2).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];
        if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
        }
        return hex.join("");
      }
      function rgbaToArgbHex(r2, g, b, a) {
        var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r2).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
        return hex.join("");
      }
      tinycolor.equals = function(color1, color2) {
        if (!color1 || !color2)
          return false;
        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
      };
      tinycolor.random = function() {
        return tinycolor.fromRatio({
          r: Math.random(),
          g: Math.random(),
          b: Math.random()
        });
      };
      function _desaturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
      }
      function _saturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
      }
      function _greyscale(color) {
        return tinycolor(color).desaturate(100);
      }
      function _lighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
      }
      function _brighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var rgb = tinycolor(color).toRgb();
        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
        return tinycolor(rgb);
      }
      function _darken(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
      }
      function _spin(color, amount) {
        var hsl = tinycolor(color).toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return tinycolor(hsl);
      }
      function _complement(color) {
        var hsl = tinycolor(color).toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return tinycolor(hsl);
      }
      function polyad(color, number) {
        if (isNaN(number) || number <= 0) {
          throw new Error("Argument to polyad must be a positive number");
        }
        var hsl = tinycolor(color).toHsl();
        var result = [tinycolor(color)];
        var step = 360 / number;
        for (var i = 1; i < number; i++) {
          result.push(tinycolor({
            h: (hsl.h + i * step) % 360,
            s: hsl.s,
            l: hsl.l
          }));
        }
        return result;
      }
      function _splitcomplement(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
          h: (h + 72) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 216) % 360,
          s: hsl.s,
          l: hsl.l
        })];
      }
      function _analogous(color, results, slices) {
        results = results || 6;
        slices = slices || 30;
        var hsl = tinycolor(color).toHsl();
        var part = 360 / slices;
        var ret = [tinycolor(color)];
        for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(tinycolor(hsl));
        }
        return ret;
      }
      function _monochromatic(color, results) {
        results = results || 6;
        var hsv = tinycolor(color).toHsv();
        var h = hsv.h, s = hsv.s, v = hsv.v;
        var ret = [];
        var modification = 1 / results;
        while (results--) {
          ret.push(tinycolor({
            h,
            s,
            v
          }));
          v = (v + modification) % 1;
        }
        return ret;
      }
      tinycolor.mix = function(color1, color2, amount) {
        amount = amount === 0 ? 0 : amount || 50;
        var rgb1 = tinycolor(color1).toRgb();
        var rgb2 = tinycolor(color2).toRgb();
        var p = amount / 100;
        var rgba = {
          r: (rgb2.r - rgb1.r) * p + rgb1.r,
          g: (rgb2.g - rgb1.g) * p + rgb1.g,
          b: (rgb2.b - rgb1.b) * p + rgb1.b,
          a: (rgb2.a - rgb1.a) * p + rgb1.a
        };
        return tinycolor(rgba);
      };
      tinycolor.readability = function(color1, color2) {
        var c1 = tinycolor(color1);
        var c2 = tinycolor(color2);
        return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
      };
      tinycolor.isReadable = function(color1, color2, wcag2) {
        var readability = tinycolor.readability(color1, color2);
        var wcag2Parms, out;
        out = false;
        wcag2Parms = validateWCAG2Parms(wcag2);
        switch (wcag2Parms.level + wcag2Parms.size) {
          case "AAsmall":
          case "AAAlarge":
            out = readability >= 4.5;
            break;
          case "AAlarge":
            out = readability >= 3;
            break;
          case "AAAsmall":
            out = readability >= 7;
            break;
        }
        return out;
      };
      tinycolor.mostReadable = function(baseColor, colorList, args) {
        var bestColor = null;
        var bestScore = 0;
        var readability;
        var includeFallbackColors, level, size;
        args = args || {};
        includeFallbackColors = args.includeFallbackColors;
        level = args.level;
        size = args.size;
        for (var i = 0; i < colorList.length; i++) {
          readability = tinycolor.readability(baseColor, colorList[i]);
          if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i]);
          }
        }
        if (tinycolor.isReadable(baseColor, bestColor, {
          level,
          size
        }) || !includeFallbackColors) {
          return bestColor;
        } else {
          args.includeFallbackColors = false;
          return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
        }
      };
      var names = tinycolor.names = {
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "0ff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000",
        blanchedalmond: "ffebcd",
        blue: "00f",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        burntsienna: "ea7e5d",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "0ff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkgrey: "a9a9a9",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkslategrey: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dimgrey: "696969",
        dodgerblue: "1e90ff",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "f0f",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        grey: "808080",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgray: "d3d3d3",
        lightgreen: "90ee90",
        lightgrey: "d3d3d3",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslategray: "789",
        lightslategrey: "789",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "0f0",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "f0f",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370db",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "db7093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        rebeccapurple: "663399",
        red: "f00",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        slategrey: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        wheat: "f5deb3",
        white: "fff",
        whitesmoke: "f5f5f5",
        yellow: "ff0",
        yellowgreen: "9acd32"
      };
      var hexNames = tinycolor.hexNames = flip(names);
      function flip(o) {
        var flipped = {};
        for (var i in o) {
          if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
          }
        }
        return flipped;
      }
      function boundAlpha(a) {
        a = parseFloat(a);
        if (isNaN(a) || a < 0 || a > 1) {
          a = 1;
        }
        return a;
      }
      function bound01(n, max) {
        if (isOnePointZero(n))
          n = "100%";
        var processPercent = isPercentage(n);
        n = Math.min(max, Math.max(0, parseFloat(n)));
        if (processPercent) {
          n = parseInt(n * max, 10) / 100;
        }
        if (Math.abs(n - max) < 1e-6) {
          return 1;
        }
        return n % max / parseFloat(max);
      }
      function clamp01(val) {
        return Math.min(1, Math.max(0, val));
      }
      function parseIntFromHex(val) {
        return parseInt(val, 16);
      }
      function isOnePointZero(n) {
        return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
      }
      function isPercentage(n) {
        return typeof n === "string" && n.indexOf("%") != -1;
      }
      function pad2(c) {
        return c.length == 1 ? "0" + c : "" + c;
      }
      function convertToPercentage(n) {
        if (n <= 1) {
          n = n * 100 + "%";
        }
        return n;
      }
      function convertDecimalToHex(d) {
        return Math.round(parseFloat(d) * 255).toString(16);
      }
      function convertHexToDecimal(h) {
        return parseIntFromHex(h) / 255;
      }
      var matchers = function() {
        var CSS_INTEGER = "[-\\+]?\\d+%?";
        var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
        var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
        var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        return {
          CSS_UNIT: new RegExp(CSS_UNIT),
          rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
          rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
          hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
          hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
          hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
          hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
          hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
          hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        };
      }();
      function isValidCSSUnit(color) {
        return !!matchers.CSS_UNIT.exec(color);
      }
      function stringInputToObject(color) {
        color = color.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
        var named = false;
        if (names[color]) {
          color = names[color];
          named = true;
        } else if (color == "transparent") {
          return {
            r: 0,
            g: 0,
            b: 0,
            a: 0,
            format: "name"
          };
        }
        var match;
        if (match = matchers.rgb.exec(color)) {
          return {
            r: match[1],
            g: match[2],
            b: match[3]
          };
        }
        if (match = matchers.rgba.exec(color)) {
          return {
            r: match[1],
            g: match[2],
            b: match[3],
            a: match[4]
          };
        }
        if (match = matchers.hsl.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            l: match[3]
          };
        }
        if (match = matchers.hsla.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            l: match[3],
            a: match[4]
          };
        }
        if (match = matchers.hsv.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            v: match[3]
          };
        }
        if (match = matchers.hsva.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            v: match[3],
            a: match[4]
          };
        }
        if (match = matchers.hex8.exec(color)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
          };
        }
        if (match = matchers.hex6.exec(color)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
          };
        }
        if (match = matchers.hex4.exec(color)) {
          return {
            r: parseIntFromHex(match[1] + "" + match[1]),
            g: parseIntFromHex(match[2] + "" + match[2]),
            b: parseIntFromHex(match[3] + "" + match[3]),
            a: convertHexToDecimal(match[4] + "" + match[4]),
            format: named ? "name" : "hex8"
          };
        }
        if (match = matchers.hex3.exec(color)) {
          return {
            r: parseIntFromHex(match[1] + "" + match[1]),
            g: parseIntFromHex(match[2] + "" + match[2]),
            b: parseIntFromHex(match[3] + "" + match[3]),
            format: named ? "name" : "hex"
          };
        }
        return false;
      }
      function validateWCAG2Parms(parms) {
        var level, size;
        parms = parms || {
          level: "AA",
          size: "small"
        };
        level = (parms.level || "AA").toUpperCase();
        size = (parms.size || "small").toLowerCase();
        if (level !== "AA" && level !== "AAA") {
          level = "AA";
        }
        if (size !== "small" && size !== "large") {
          size = "small";
        }
        return {
          level,
          size
        };
      }
      return tinycolor;
    });
  }
});

// node_modules/@swc/helpers/lib/_define_property.js
var require_define_property = __commonJS({
  "node_modules/@swc/helpers/lib/_define_property.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return _defineProperty;
      }
    });
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
  }
});

// node_modules/@react-stately/utils/dist/main.js
var require_main = __commonJS({
  "node_modules/@react-stately/utils/dist/main.js"(exports, module) {
    var $kC0mY$react = require_react();
    function $parcel$export(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    $parcel$export(module.exports, "useControlledState", () => $8d8fdfab47455712$export$40bfa8c7b0832715);
    $parcel$export(module.exports, "clamp", () => $ac8e4d4816275668$export$7d15b64cf5a3a4c4);
    $parcel$export(module.exports, "snapValueToStep", () => $ac8e4d4816275668$export$cb6e0bb50bc19463);
    $parcel$export(module.exports, "toFixedNumber", () => $ac8e4d4816275668$export$b6268554fba451f);
    function $8d8fdfab47455712$export$40bfa8c7b0832715(value, defaultValue, onChange) {
      let [stateValue, setStateValue] = (0, $kC0mY$react.useState)(value || defaultValue);
      let ref = (0, $kC0mY$react.useRef)(value !== void 0);
      let wasControlled = ref.current;
      let isControlled = value !== void 0;
      let stateRef = (0, $kC0mY$react.useRef)(stateValue);
      if (wasControlled !== isControlled)
        console.warn(`WARN: A component changed from ${wasControlled ? "controlled" : "uncontrolled"} to ${isControlled ? "controlled" : "uncontrolled"}.`);
      ref.current = isControlled;
      let setValue = (0, $kC0mY$react.useCallback)((value2, ...args) => {
        let onChangeCaller = (value3, ...onChangeArgs) => {
          if (onChange) {
            if (!Object.is(stateRef.current, value3))
              onChange(value3, ...onChangeArgs);
          }
          if (!isControlled)
            stateRef.current = value3;
        };
        if (typeof value2 === "function") {
          console.warn("We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320");
          let updateFunction = (oldValue, ...functionArgs) => {
            let interceptedValue = value2(isControlled ? stateRef.current : oldValue, ...functionArgs);
            onChangeCaller(interceptedValue, ...args);
            if (!isControlled)
              return interceptedValue;
            return oldValue;
          };
          setStateValue(updateFunction);
        } else {
          if (!isControlled)
            setStateValue(value2);
          onChangeCaller(value2, ...args);
        }
      }, [
        isControlled,
        onChange
      ]);
      if (isControlled)
        stateRef.current = value;
      else
        value = stateValue;
      return [
        value,
        setValue
      ];
    }
    function $ac8e4d4816275668$export$7d15b64cf5a3a4c4(value, min = -Infinity, max = Infinity) {
      let newValue = Math.min(Math.max(value, min), max);
      return newValue;
    }
    function $ac8e4d4816275668$export$cb6e0bb50bc19463(value, min, max, step) {
      let remainder = (value - (isNaN(min) ? 0 : min)) % step;
      let snappedValue = Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder;
      if (!isNaN(min)) {
        if (snappedValue < min)
          snappedValue = min;
        else if (!isNaN(max) && snappedValue > max)
          snappedValue = min + Math.floor((max - min) / step) * step;
      } else if (!isNaN(max) && snappedValue > max)
        snappedValue = Math.floor(max / step) * step;
      let string = step.toString();
      let index = string.indexOf(".");
      let precision = index >= 0 ? string.length - index : 0;
      if (precision > 0) {
        let pow = Math.pow(10, precision);
        snappedValue = Math.round(snappedValue * pow) / pow;
      }
      return snappedValue;
    }
    function $ac8e4d4816275668$export$b6268554fba451f(value, digits, base = 10) {
      const pow = Math.pow(base, digits);
      return Math.round(value * pow) / pow;
    }
  }
});

// node_modules/@react-aria/ssr/dist/main.js
var require_main2 = __commonJS({
  "node_modules/@react-aria/ssr/dist/main.js"(exports, module) {
    var $4hxXn$react = require_react();
    function $parcel$export(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$export(module.exports, "SSRProvider", () => $29383e587d62412a$export$9f8ac96af4b1b2ae);
    $parcel$export(module.exports, "useSSRSafeId", () => $29383e587d62412a$export$619500959fc48b26);
    $parcel$export(module.exports, "useIsSSR", () => $29383e587d62412a$export$535bd6ca7f90a273);
    var $29383e587d62412a$var$defaultContext = {
      prefix: String(Math.round(Math.random() * 1e10)),
      current: 0,
      isSSR: false
    };
    var $29383e587d62412a$var$SSRContext = (0, $parcel$interopDefault($4hxXn$react)).createContext($29383e587d62412a$var$defaultContext);
    function $29383e587d62412a$export$9f8ac96af4b1b2ae(props) {
      let cur = (0, $4hxXn$react.useContext)($29383e587d62412a$var$SSRContext);
      let counter = $29383e587d62412a$var$useCounter(cur === $29383e587d62412a$var$defaultContext);
      let [isSSR, setIsSSR] = (0, $4hxXn$react.useState)(true);
      let value = (0, $4hxXn$react.useMemo)(() => ({
        // If this is the first SSRProvider, start with an empty string prefix, otherwise
        // append and increment the counter.
        prefix: cur === $29383e587d62412a$var$defaultContext ? "" : `${cur.prefix}-${counter}`,
        current: 0,
        isSSR
      }), [
        cur,
        counter,
        isSSR
      ]);
      if (typeof window !== "undefined")
        (0, $4hxXn$react.useLayoutEffect)(() => {
          setIsSSR(false);
        }, []);
      return (0, $parcel$interopDefault($4hxXn$react)).createElement($29383e587d62412a$var$SSRContext.Provider, {
        value
      }, props.children);
    }
    var $29383e587d62412a$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
    var $29383e587d62412a$var$componentIds = /* @__PURE__ */ new WeakMap();
    function $29383e587d62412a$var$useCounter(isDisabled = false) {
      let ctx = (0, $4hxXn$react.useContext)($29383e587d62412a$var$SSRContext);
      let ref = (0, $4hxXn$react.useRef)(null);
      if (ref.current === null && !isDisabled) {
        var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner;
        let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, $parcel$interopDefault($4hxXn$react)).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;
        if (currentOwner) {
          let prevComponentValue = $29383e587d62412a$var$componentIds.get(currentOwner);
          if (prevComponentValue == null)
            $29383e587d62412a$var$componentIds.set(currentOwner, {
              id: ctx.current,
              state: currentOwner.memoizedState
            });
          else if (currentOwner.memoizedState !== prevComponentValue.state) {
            ctx.current = prevComponentValue.id;
            $29383e587d62412a$var$componentIds.delete(currentOwner);
          }
        }
        ref.current = ++ctx.current;
      }
      return ref.current;
    }
    function $29383e587d62412a$export$619500959fc48b26(defaultId) {
      let ctx = (0, $4hxXn$react.useContext)($29383e587d62412a$var$SSRContext);
      if (ctx === $29383e587d62412a$var$defaultContext && !$29383e587d62412a$var$canUseDOM)
        console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
      let counter = $29383e587d62412a$var$useCounter(!!defaultId);
      return defaultId || `react-aria${ctx.prefix}-${counter}`;
    }
    function $29383e587d62412a$export$535bd6ca7f90a273() {
      let cur = (0, $4hxXn$react.useContext)($29383e587d62412a$var$SSRContext);
      return cur.isSSR;
    }
  }
});

// node_modules/clsx/dist/clsx.m.js
var clsx_m_exports = {};
__export(clsx_m_exports, {
  clsx: () => clsx,
  default: () => clsx_m_default
});
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e))
      for (t = 0; t < e.length; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    else
      for (t in e)
        e[t] && (n && (n += " "), n += t);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = ""; f < arguments.length; )
    (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_m_default;
var init_clsx_m = __esm({
  "node_modules/clsx/dist/clsx.m.js"() {
    clsx_m_default = clsx;
  }
});

// node_modules/@react-aria/utils/dist/main.js
var require_main3 = __commonJS({
  "node_modules/@react-aria/utils/dist/main.js"(exports, module) {
    var $1Yh1N$reactstatelyutils = require_main();
    var $1Yh1N$react = require_react();
    var $1Yh1N$reactariassr = require_main2();
    var $1Yh1N$clsx = (init_clsx_m(), __toCommonJS(clsx_m_exports));
    function $parcel$export(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$export(module.exports, "useId", () => $8c61827343eed941$export$f680877a34711e37);
    $parcel$export(module.exports, "mergeIds", () => $8c61827343eed941$export$cd8c9cb68f842629);
    $parcel$export(module.exports, "useSlotId", () => $8c61827343eed941$export$b4cc09c592e8fdb8);
    $parcel$export(module.exports, "chain", () => $1e2191638e54f613$export$e08e3b67e392101e);
    $parcel$export(module.exports, "mergeProps", () => $f847cd1382ea7cd4$export$9d1611c77c2fe928);
    $parcel$export(module.exports, "mergeRefs", () => $f05dc24eafaeb7e2$export$c9058316764c140e);
    $parcel$export(module.exports, "filterDOMProps", () => $8d15d0e1797d4238$export$457c3d6518dd4c6f);
    $parcel$export(module.exports, "focusWithoutScrolling", () => $1117b6c0d4c4c164$export$de79e2c695e052f3);
    $parcel$export(module.exports, "getOffset", () => $16ec41ef3e36c19c$export$622cea445a1c5b7d);
    $parcel$export(module.exports, "runAfterTransition", () => $e8117ebcab55be6a$export$24490316f764c430);
    $parcel$export(module.exports, "useDrag1D", () => $28ed3fb20343b78b$export$7bbed75feba39706);
    $parcel$export(module.exports, "useGlobalListeners", () => $4571ff54ac709100$export$4eaf04e54aa8eed6);
    $parcel$export(module.exports, "useLabels", () => $6ec78bde395c477d$export$d6875122194c7b44);
    $parcel$export(module.exports, "useObjectRef", () => $475b35fe72ba49b3$export$4338b53315abf666);
    $parcel$export(module.exports, "useUpdateEffect", () => $29293a6f5c75b37e$export$496315a1608d9602);
    $parcel$export(module.exports, "useLayoutEffect", () => $78605a5d7424e31b$export$e5c5a5f917a5871c);
    $parcel$export(module.exports, "useResizeObserver", () => $37733e1652f47193$export$683480f191c0e3ea);
    $parcel$export(module.exports, "useSyncRef", () => $6fc733991a9f977c$export$4debdb1a3f0fa79e);
    $parcel$export(module.exports, "getScrollParent", () => $d796e7157ac96470$export$cfa2225e87938781);
    $parcel$export(module.exports, "isScrollable", () => $d796e7157ac96470$export$2bb74740c4e19def);
    $parcel$export(module.exports, "useViewportSize", () => $8b24bab62f5c65ad$export$d699905dd57c73ca);
    $parcel$export(module.exports, "useDescription", () => $34da4502ea8120db$export$f8aeda7b10753fa1);
    $parcel$export(module.exports, "isMac", () => $9e20cff0af27e8cc$export$9ac100e40613ea10);
    $parcel$export(module.exports, "isIPhone", () => $9e20cff0af27e8cc$export$186c6964ca17d99);
    $parcel$export(module.exports, "isIPad", () => $9e20cff0af27e8cc$export$7bef049ce92e4224);
    $parcel$export(module.exports, "isIOS", () => $9e20cff0af27e8cc$export$fedb369cb70207f1);
    $parcel$export(module.exports, "isAppleDevice", () => $9e20cff0af27e8cc$export$e1865c3bedcd822b);
    $parcel$export(module.exports, "isWebKit", () => $9e20cff0af27e8cc$export$78551043582a6a98);
    $parcel$export(module.exports, "isChrome", () => $9e20cff0af27e8cc$export$6446a186d09e379e);
    $parcel$export(module.exports, "isAndroid", () => $9e20cff0af27e8cc$export$a11b0059900ceec8);
    $parcel$export(module.exports, "useEvent", () => $2a8c0bb1629926c8$export$90fc3a17d93f704c);
    $parcel$export(module.exports, "useValueEffect", () => $19a2307bfabafaf1$export$14d238f342723f25);
    $parcel$export(module.exports, "scrollIntoView", () => $449412113267a1fe$export$53a0910f038337bd);
    $parcel$export(module.exports, "scrollIntoViewport", () => $449412113267a1fe$export$c826860796309d1b);
    $parcel$export(module.exports, "clamp", () => $1Yh1N$reactstatelyutils.clamp);
    $parcel$export(module.exports, "snapValueToStep", () => $1Yh1N$reactstatelyutils.snapValueToStep);
    $parcel$export(module.exports, "isVirtualClick", () => $577e795361f19be9$export$60278871457622de);
    $parcel$export(module.exports, "isVirtualPointerEvent", () => $577e795361f19be9$export$29bf1b5f2c56cf63);
    $parcel$export(module.exports, "useEffectEvent", () => $1254e5bb94ac8761$export$7f54fc3180508a52);
    var $78605a5d7424e31b$export$e5c5a5f917a5871c = typeof window !== "undefined" ? (0, $parcel$interopDefault($1Yh1N$react)).useLayoutEffect : () => {
    };
    function $19a2307bfabafaf1$export$14d238f342723f25(defaultValue) {
      let [value, setValue] = (0, $1Yh1N$react.useState)(defaultValue);
      let valueRef = (0, $1Yh1N$react.useRef)(value);
      let effect = (0, $1Yh1N$react.useRef)(null);
      let nextIter = (0, $1Yh1N$react.useCallback)(() => {
        let newValue = effect.current.next();
        while (!newValue.done && valueRef.current === newValue.value)
          newValue = effect.current.next();
        if (newValue.done) {
          effect.current = null;
          return;
        }
        setValue(newValue.value);
        valueRef.current = newValue.value;
      }, [
        setValue,
        valueRef,
        effect
      ]);
      (0, $78605a5d7424e31b$export$e5c5a5f917a5871c)(() => {
        if (effect.current)
          nextIter();
      });
      let queue = (0, $1Yh1N$react.useCallback)((fn) => {
        effect.current = fn(valueRef.current);
        nextIter();
      }, [
        nextIter,
        effect,
        valueRef
      ]);
      return [
        value,
        queue
      ];
    }
    var $8c61827343eed941$var$idsUpdaterMap = /* @__PURE__ */ new Map();
    function $8c61827343eed941$export$f680877a34711e37(defaultId) {
      let [value, setValue] = (0, $1Yh1N$react.useState)(defaultId);
      let nextId = (0, $1Yh1N$react.useRef)(null);
      let res = (0, $1Yh1N$reactariassr.useSSRSafeId)(value);
      let updateValue = (0, $1Yh1N$react.useCallback)((val) => {
        nextId.current = val;
      }, []);
      $8c61827343eed941$var$idsUpdaterMap.set(res, updateValue);
      (0, $78605a5d7424e31b$export$e5c5a5f917a5871c)(() => {
        let r2 = res;
        return () => {
          $8c61827343eed941$var$idsUpdaterMap.delete(r2);
        };
      }, [
        res
      ]);
      (0, $1Yh1N$react.useEffect)(() => {
        let newId = nextId.current;
        if (newId) {
          nextId.current = null;
          setValue(newId);
        }
      });
      return res;
    }
    function $8c61827343eed941$export$cd8c9cb68f842629(idA, idB) {
      if (idA === idB)
        return idA;
      let setIdA = $8c61827343eed941$var$idsUpdaterMap.get(idA);
      if (setIdA) {
        setIdA(idB);
        return idB;
      }
      let setIdB = $8c61827343eed941$var$idsUpdaterMap.get(idB);
      if (setIdB) {
        setIdB(idA);
        return idA;
      }
      return idB;
    }
    function $8c61827343eed941$export$b4cc09c592e8fdb8(depArray = []) {
      let id = $8c61827343eed941$export$f680877a34711e37();
      let [resolvedId, setResolvedId] = (0, $19a2307bfabafaf1$export$14d238f342723f25)(id);
      let updateId = (0, $1Yh1N$react.useCallback)(() => {
        setResolvedId(function* () {
          yield id;
          yield document.getElementById(id) ? id : void 0;
        });
      }, [
        id,
        setResolvedId
      ]);
      (0, $78605a5d7424e31b$export$e5c5a5f917a5871c)(updateId, [
        id,
        updateId,
        ...depArray
      ]);
      return resolvedId;
    }
    function $1e2191638e54f613$export$e08e3b67e392101e(...callbacks) {
      return (...args) => {
        for (let callback of callbacks)
          if (typeof callback === "function")
            callback(...args);
      };
    }
    function $f847cd1382ea7cd4$export$9d1611c77c2fe928(...args) {
      let result = {
        ...args[0]
      };
      for (let i = 1; i < args.length; i++) {
        let props = args[i];
        for (let key in props) {
          let a = result[key];
          let b = props[key];
          if (typeof a === "function" && typeof b === "function" && // This is a lot faster than a regex.
          key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */
          65 && key.charCodeAt(2) <= /* 'Z' */
          90)
            result[key] = (0, $1e2191638e54f613$export$e08e3b67e392101e)(a, b);
          else if ((key === "className" || key === "UNSAFE_className") && typeof a === "string" && typeof b === "string")
            result[key] = (0, $parcel$interopDefault($1Yh1N$clsx))(a, b);
          else if (key === "id" && a && b)
            result.id = (0, $8c61827343eed941$export$cd8c9cb68f842629)(a, b);
          else
            result[key] = b !== void 0 ? b : a;
        }
      }
      return result;
    }
    function $f05dc24eafaeb7e2$export$c9058316764c140e(...refs) {
      if (refs.length === 1)
        return refs[0];
      return (value) => {
        for (let ref of refs) {
          if (typeof ref === "function")
            ref(value);
          else if (ref != null)
            ref.current = value;
        }
      };
    }
    var $8d15d0e1797d4238$var$DOMPropNames = /* @__PURE__ */ new Set([
      "id"
    ]);
    var $8d15d0e1797d4238$var$labelablePropNames = /* @__PURE__ */ new Set([
      "aria-label",
      "aria-labelledby",
      "aria-describedby",
      "aria-details"
    ]);
    var $8d15d0e1797d4238$var$propRe = /^(data-.*)$/;
    function $8d15d0e1797d4238$export$457c3d6518dd4c6f(props, opts = {}) {
      let { labelable, propNames } = opts;
      let filteredProps = {};
      for (const prop in props)
        if (Object.prototype.hasOwnProperty.call(props, prop) && ($8d15d0e1797d4238$var$DOMPropNames.has(prop) || labelable && $8d15d0e1797d4238$var$labelablePropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || $8d15d0e1797d4238$var$propRe.test(prop)))
          filteredProps[prop] = props[prop];
      return filteredProps;
    }
    function $1117b6c0d4c4c164$export$de79e2c695e052f3(element) {
      if ($1117b6c0d4c4c164$var$supportsPreventScroll())
        element.focus({
          preventScroll: true
        });
      else {
        let scrollableElements = $1117b6c0d4c4c164$var$getScrollableElements(element);
        element.focus();
        $1117b6c0d4c4c164$var$restoreScrollPosition(scrollableElements);
      }
    }
    var $1117b6c0d4c4c164$var$supportsPreventScrollCached = null;
    function $1117b6c0d4c4c164$var$supportsPreventScroll() {
      if ($1117b6c0d4c4c164$var$supportsPreventScrollCached == null) {
        $1117b6c0d4c4c164$var$supportsPreventScrollCached = false;
        try {
          var focusElem = document.createElement("div");
          focusElem.focus({
            get preventScroll() {
              $1117b6c0d4c4c164$var$supportsPreventScrollCached = true;
              return true;
            }
          });
        } catch (e) {
        }
      }
      return $1117b6c0d4c4c164$var$supportsPreventScrollCached;
    }
    function $1117b6c0d4c4c164$var$getScrollableElements(element) {
      var parent = element.parentNode;
      var scrollableElements = [];
      var rootScrollingElement = document.scrollingElement || document.documentElement;
      while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
        if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth)
          scrollableElements.push({
            element: parent,
            scrollTop: parent.scrollTop,
            scrollLeft: parent.scrollLeft
          });
        parent = parent.parentNode;
      }
      if (rootScrollingElement instanceof HTMLElement)
        scrollableElements.push({
          element: rootScrollingElement,
          scrollTop: rootScrollingElement.scrollTop,
          scrollLeft: rootScrollingElement.scrollLeft
        });
      return scrollableElements;
    }
    function $1117b6c0d4c4c164$var$restoreScrollPosition(scrollableElements) {
      for (let { element, scrollTop, scrollLeft } of scrollableElements) {
        element.scrollTop = scrollTop;
        element.scrollLeft = scrollLeft;
      }
    }
    function $16ec41ef3e36c19c$export$622cea445a1c5b7d(element, reverse, orientation = "horizontal") {
      let rect = element.getBoundingClientRect();
      if (reverse)
        return orientation === "horizontal" ? rect.right : rect.bottom;
      return orientation === "horizontal" ? rect.left : rect.top;
    }
    var $e8117ebcab55be6a$var$transitionsByElement = /* @__PURE__ */ new Map();
    var $e8117ebcab55be6a$var$transitionCallbacks = /* @__PURE__ */ new Set();
    function $e8117ebcab55be6a$var$setupGlobalEvents() {
      if (typeof window === "undefined")
        return;
      let onTransitionStart = (e) => {
        let transitions = $e8117ebcab55be6a$var$transitionsByElement.get(e.target);
        if (!transitions) {
          transitions = /* @__PURE__ */ new Set();
          $e8117ebcab55be6a$var$transitionsByElement.set(e.target, transitions);
          e.target.addEventListener("transitioncancel", onTransitionEnd);
        }
        transitions.add(e.propertyName);
      };
      let onTransitionEnd = (e) => {
        let properties = $e8117ebcab55be6a$var$transitionsByElement.get(e.target);
        if (!properties)
          return;
        properties.delete(e.propertyName);
        if (properties.size === 0) {
          e.target.removeEventListener("transitioncancel", onTransitionEnd);
          $e8117ebcab55be6a$var$transitionsByElement.delete(e.target);
        }
        if ($e8117ebcab55be6a$var$transitionsByElement.size === 0) {
          for (let cb of $e8117ebcab55be6a$var$transitionCallbacks)
            cb();
          $e8117ebcab55be6a$var$transitionCallbacks.clear();
        }
      };
      document.body.addEventListener("transitionrun", onTransitionStart);
      document.body.addEventListener("transitionend", onTransitionEnd);
    }
    if (typeof document !== "undefined") {
      if (document.readyState !== "loading")
        $e8117ebcab55be6a$var$setupGlobalEvents();
      else
        document.addEventListener("DOMContentLoaded", $e8117ebcab55be6a$var$setupGlobalEvents);
    }
    function $e8117ebcab55be6a$export$24490316f764c430(fn) {
      requestAnimationFrame(() => {
        if ($e8117ebcab55be6a$var$transitionsByElement.size === 0)
          fn();
        else
          $e8117ebcab55be6a$var$transitionCallbacks.add(fn);
      });
    }
    var $28ed3fb20343b78b$var$draggingElements = [];
    function $28ed3fb20343b78b$export$7bbed75feba39706(props) {
      console.warn("useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html");
      let { containerRef, reverse, orientation, onHover, onDrag, onPositionChange, onIncrement, onDecrement, onIncrementToMax, onDecrementToMin, onCollapseToggle } = props;
      let getPosition = (e) => orientation === "horizontal" ? e.clientX : e.clientY;
      let getNextOffset = (e) => {
        let containerOffset = (0, $16ec41ef3e36c19c$export$622cea445a1c5b7d)(containerRef.current, reverse, orientation);
        let mouseOffset = getPosition(e);
        let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
        return nextOffset;
      };
      let dragging = (0, $1Yh1N$react.useRef)(false);
      let prevPosition = (0, $1Yh1N$react.useRef)(0);
      let handlers = (0, $1Yh1N$react.useRef)({
        onPositionChange,
        onDrag
      });
      handlers.current.onDrag = onDrag;
      handlers.current.onPositionChange = onPositionChange;
      let onMouseDragged = (e) => {
        e.preventDefault();
        let nextOffset = getNextOffset(e);
        if (!dragging.current) {
          dragging.current = true;
          if (handlers.current.onDrag)
            handlers.current.onDrag(true);
          if (handlers.current.onPositionChange)
            handlers.current.onPositionChange(nextOffset);
        }
        if (prevPosition.current === nextOffset)
          return;
        prevPosition.current = nextOffset;
        if (onPositionChange)
          onPositionChange(nextOffset);
      };
      let onMouseUp = (e) => {
        const target = e.target;
        dragging.current = false;
        let nextOffset = getNextOffset(e);
        if (handlers.current.onDrag)
          handlers.current.onDrag(false);
        if (handlers.current.onPositionChange)
          handlers.current.onPositionChange(nextOffset);
        $28ed3fb20343b78b$var$draggingElements.splice($28ed3fb20343b78b$var$draggingElements.indexOf(target), 1);
        window.removeEventListener("mouseup", onMouseUp, false);
        window.removeEventListener("mousemove", onMouseDragged, false);
      };
      let onMouseDown = (e) => {
        const target = e.currentTarget;
        if ($28ed3fb20343b78b$var$draggingElements.some((elt) => target.contains(elt)))
          return;
        $28ed3fb20343b78b$var$draggingElements.push(target);
        window.addEventListener("mousemove", onMouseDragged, false);
        window.addEventListener("mouseup", onMouseUp, false);
      };
      let onMouseEnter = () => {
        if (onHover)
          onHover(true);
      };
      let onMouseOut = () => {
        if (onHover)
          onHover(false);
      };
      let onKeyDown = (e) => {
        switch (e.key) {
          case "Left":
          case "ArrowLeft":
            if (orientation === "horizontal") {
              e.preventDefault();
              if (onDecrement && !reverse)
                onDecrement();
              else if (onIncrement && reverse)
                onIncrement();
            }
            break;
          case "Up":
          case "ArrowUp":
            if (orientation === "vertical") {
              e.preventDefault();
              if (onDecrement && !reverse)
                onDecrement();
              else if (onIncrement && reverse)
                onIncrement();
            }
            break;
          case "Right":
          case "ArrowRight":
            if (orientation === "horizontal") {
              e.preventDefault();
              if (onIncrement && !reverse)
                onIncrement();
              else if (onDecrement && reverse)
                onDecrement();
            }
            break;
          case "Down":
          case "ArrowDown":
            if (orientation === "vertical") {
              e.preventDefault();
              if (onIncrement && !reverse)
                onIncrement();
              else if (onDecrement && reverse)
                onDecrement();
            }
            break;
          case "Home":
            e.preventDefault();
            if (onDecrementToMin)
              onDecrementToMin();
            break;
          case "End":
            e.preventDefault();
            if (onIncrementToMax)
              onIncrementToMax();
            break;
          case "Enter":
            e.preventDefault();
            if (onCollapseToggle)
              onCollapseToggle();
            break;
        }
      };
      return {
        onMouseDown,
        onMouseEnter,
        onMouseOut,
        onKeyDown
      };
    }
    function $4571ff54ac709100$export$4eaf04e54aa8eed6() {
      let globalListeners = (0, $1Yh1N$react.useRef)(/* @__PURE__ */ new Map());
      let addGlobalListener = (0, $1Yh1N$react.useCallback)((eventTarget, type, listener, options) => {
        let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
          globalListeners.current.delete(listener);
          listener(...args);
        } : listener;
        globalListeners.current.set(listener, {
          type,
          eventTarget,
          fn,
          options
        });
        eventTarget.addEventListener(type, listener, options);
      }, []);
      let removeGlobalListener = (0, $1Yh1N$react.useCallback)((eventTarget, type, listener, options) => {
        var _globalListeners_current_get;
        let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
        eventTarget.removeEventListener(type, fn, options);
        globalListeners.current.delete(listener);
      }, []);
      let removeAllGlobalListeners = (0, $1Yh1N$react.useCallback)(() => {
        globalListeners.current.forEach((value, key) => {
          removeGlobalListener(value.eventTarget, value.type, key, value.options);
        });
      }, [
        removeGlobalListener
      ]);
      (0, $1Yh1N$react.useEffect)(() => {
        return removeAllGlobalListeners;
      }, [
        removeAllGlobalListeners
      ]);
      return {
        addGlobalListener,
        removeGlobalListener,
        removeAllGlobalListeners
      };
    }
    function $6ec78bde395c477d$export$d6875122194c7b44(props, defaultLabel) {
      let { id, "aria-label": label, "aria-labelledby": labelledBy } = props;
      id = (0, $8c61827343eed941$export$f680877a34711e37)(id);
      if (labelledBy && label) {
        let ids = /* @__PURE__ */ new Set([
          ...labelledBy.trim().split(/\s+/),
          id
        ]);
        labelledBy = [
          ...ids
        ].join(" ");
      } else if (labelledBy)
        labelledBy = labelledBy.trim().split(/\s+/).join(" ");
      if (!label && !labelledBy && defaultLabel)
        label = defaultLabel;
      return {
        id,
        "aria-label": label,
        "aria-labelledby": labelledBy
      };
    }
    function $475b35fe72ba49b3$export$4338b53315abf666(forwardedRef) {
      const objRef = (0, $1Yh1N$react.useRef)();
      (0, $78605a5d7424e31b$export$e5c5a5f917a5871c)(() => {
        if (!forwardedRef)
          return;
        if (typeof forwardedRef === "function")
          forwardedRef(objRef.current);
        else
          forwardedRef.current = objRef.current;
        return () => {
          if (typeof forwardedRef === "function")
            forwardedRef(null);
          else
            forwardedRef.current = null;
        };
      }, [
        forwardedRef
      ]);
      return objRef;
    }
    function $29293a6f5c75b37e$export$496315a1608d9602(effect, dependencies) {
      const isInitialMount = (0, $1Yh1N$react.useRef)(true);
      (0, $1Yh1N$react.useEffect)(() => {
        if (isInitialMount.current)
          isInitialMount.current = false;
        else
          effect();
      }, dependencies);
    }
    function $37733e1652f47193$var$hasResizeObserver() {
      return typeof window.ResizeObserver !== "undefined";
    }
    function $37733e1652f47193$export$683480f191c0e3ea(options) {
      const { ref, onResize } = options;
      (0, $1Yh1N$react.useEffect)(() => {
        let element = ref === null || ref === void 0 ? void 0 : ref.current;
        if (!element)
          return;
        if (!$37733e1652f47193$var$hasResizeObserver()) {
          window.addEventListener("resize", onResize, false);
          return () => {
            window.removeEventListener("resize", onResize, false);
          };
        } else {
          const resizeObserverInstance = new window.ResizeObserver((entries) => {
            if (!entries.length)
              return;
            onResize();
          });
          resizeObserverInstance.observe(element);
          return () => {
            if (element)
              resizeObserverInstance.unobserve(element);
          };
        }
      }, [
        onResize,
        ref
      ]);
    }
    function $6fc733991a9f977c$export$4debdb1a3f0fa79e(context, ref) {
      (0, $78605a5d7424e31b$export$e5c5a5f917a5871c)(() => {
        if (context && context.ref && ref) {
          context.ref.current = ref.current;
          return () => {
            context.ref.current = null;
          };
        }
      }, [
        context,
        ref
      ]);
    }
    function $d796e7157ac96470$export$cfa2225e87938781(node) {
      if ($d796e7157ac96470$export$2bb74740c4e19def(node))
        node = node.parentElement;
      while (node && !$d796e7157ac96470$export$2bb74740c4e19def(node))
        node = node.parentElement;
      return node || document.scrollingElement || document.documentElement;
    }
    function $d796e7157ac96470$export$2bb74740c4e19def(node) {
      let style = window.getComputedStyle(node);
      return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
    }
    var $8b24bab62f5c65ad$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
    function $8b24bab62f5c65ad$export$d699905dd57c73ca() {
      let [size, setSize] = (0, $1Yh1N$react.useState)(() => $8b24bab62f5c65ad$var$getViewportSize());
      (0, $1Yh1N$react.useEffect)(() => {
        let onResize = () => {
          setSize((size2) => {
            let newSize = $8b24bab62f5c65ad$var$getViewportSize();
            if (newSize.width === size2.width && newSize.height === size2.height)
              return size2;
            return newSize;
          });
        };
        if (!$8b24bab62f5c65ad$var$visualViewport)
          window.addEventListener("resize", onResize);
        else
          $8b24bab62f5c65ad$var$visualViewport.addEventListener("resize", onResize);
        return () => {
          if (!$8b24bab62f5c65ad$var$visualViewport)
            window.removeEventListener("resize", onResize);
          else
            $8b24bab62f5c65ad$var$visualViewport.removeEventListener("resize", onResize);
        };
      }, []);
      return size;
    }
    function $8b24bab62f5c65ad$var$getViewportSize() {
      return {
        width: ($8b24bab62f5c65ad$var$visualViewport === null || $8b24bab62f5c65ad$var$visualViewport === void 0 ? void 0 : $8b24bab62f5c65ad$var$visualViewport.width) || window.innerWidth,
        height: ($8b24bab62f5c65ad$var$visualViewport === null || $8b24bab62f5c65ad$var$visualViewport === void 0 ? void 0 : $8b24bab62f5c65ad$var$visualViewport.height) || window.innerHeight
      };
    }
    var $34da4502ea8120db$var$descriptionId = 0;
    var $34da4502ea8120db$var$descriptionNodes = /* @__PURE__ */ new Map();
    function $34da4502ea8120db$export$f8aeda7b10753fa1(description) {
      let [id, setId] = (0, $1Yh1N$react.useState)(void 0);
      (0, $78605a5d7424e31b$export$e5c5a5f917a5871c)(() => {
        if (!description)
          return;
        let desc = $34da4502ea8120db$var$descriptionNodes.get(description);
        if (!desc) {
          let id2 = `react-aria-description-${$34da4502ea8120db$var$descriptionId++}`;
          setId(id2);
          let node = document.createElement("div");
          node.id = id2;
          node.style.display = "none";
          node.textContent = description;
          document.body.appendChild(node);
          desc = {
            refCount: 0,
            element: node
          };
          $34da4502ea8120db$var$descriptionNodes.set(description, desc);
        } else
          setId(desc.element.id);
        desc.refCount++;
        return () => {
          if (--desc.refCount === 0) {
            desc.element.remove();
            $34da4502ea8120db$var$descriptionNodes.delete(description);
          }
        };
      }, [
        description
      ]);
      return {
        "aria-describedby": description ? id : void 0
      };
    }
    function $9e20cff0af27e8cc$var$testUserAgent(re) {
      var _window_navigator_userAgentData;
      if (typeof window === "undefined" || window.navigator == null)
        return false;
      return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand) => re.test(brand.brand))) || re.test(window.navigator.userAgent);
    }
    function $9e20cff0af27e8cc$var$testPlatform(re) {
      var _window_navigator_userAgentData;
      return typeof window !== "undefined" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
    }
    function $9e20cff0af27e8cc$export$9ac100e40613ea10() {
      return $9e20cff0af27e8cc$var$testPlatform(/^Mac/i);
    }
    function $9e20cff0af27e8cc$export$186c6964ca17d99() {
      return $9e20cff0af27e8cc$var$testPlatform(/^iPhone/i);
    }
    function $9e20cff0af27e8cc$export$7bef049ce92e4224() {
      return $9e20cff0af27e8cc$var$testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
      $9e20cff0af27e8cc$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
    }
    function $9e20cff0af27e8cc$export$fedb369cb70207f1() {
      return $9e20cff0af27e8cc$export$186c6964ca17d99() || $9e20cff0af27e8cc$export$7bef049ce92e4224();
    }
    function $9e20cff0af27e8cc$export$e1865c3bedcd822b() {
      return $9e20cff0af27e8cc$export$9ac100e40613ea10() || $9e20cff0af27e8cc$export$fedb369cb70207f1();
    }
    function $9e20cff0af27e8cc$export$78551043582a6a98() {
      return $9e20cff0af27e8cc$var$testUserAgent(/AppleWebKit/i) && !$9e20cff0af27e8cc$export$6446a186d09e379e();
    }
    function $9e20cff0af27e8cc$export$6446a186d09e379e() {
      return $9e20cff0af27e8cc$var$testUserAgent(/Chrome/i);
    }
    function $9e20cff0af27e8cc$export$a11b0059900ceec8() {
      return $9e20cff0af27e8cc$var$testUserAgent(/Android/i);
    }
    function $2a8c0bb1629926c8$export$90fc3a17d93f704c(ref, event, handler, options) {
      let handlerRef = (0, $1Yh1N$react.useRef)(handler);
      handlerRef.current = handler;
      let isDisabled = handler == null;
      (0, $1Yh1N$react.useEffect)(() => {
        if (isDisabled)
          return;
        let element = ref.current;
        let handler2 = (e) => handlerRef.current.call(this, e);
        element.addEventListener(event, handler2, options);
        return () => {
          element.removeEventListener(event, handler2, options);
        };
      }, [
        ref,
        event,
        options,
        isDisabled
      ]);
    }
    function $449412113267a1fe$export$53a0910f038337bd(scrollView, element) {
      let offsetX = $449412113267a1fe$var$relativeOffset(scrollView, element, "left");
      let offsetY = $449412113267a1fe$var$relativeOffset(scrollView, element, "top");
      let width = element.offsetWidth;
      let height = element.offsetHeight;
      let x = scrollView.scrollLeft;
      let y = scrollView.scrollTop;
      let { borderTopWidth, borderLeftWidth } = getComputedStyle(scrollView);
      let borderAdjustedX = scrollView.scrollLeft + parseInt(borderLeftWidth, 10);
      let borderAdjustedY = scrollView.scrollTop + parseInt(borderTopWidth, 10);
      let maxX = borderAdjustedX + scrollView.clientWidth;
      let maxY = borderAdjustedY + scrollView.clientHeight;
      if (offsetX <= x)
        x = offsetX - parseInt(borderLeftWidth, 10);
      else if (offsetX + width > maxX)
        x += offsetX + width - maxX;
      if (offsetY <= borderAdjustedY)
        y = offsetY - parseInt(borderTopWidth, 10);
      else if (offsetY + height > maxY)
        y += offsetY + height - maxY;
      scrollView.scrollLeft = x;
      scrollView.scrollTop = y;
    }
    function $449412113267a1fe$var$relativeOffset(ancestor, child, axis) {
      const prop = axis === "left" ? "offsetLeft" : "offsetTop";
      let sum = 0;
      while (child.offsetParent) {
        sum += child[prop];
        if (child.offsetParent === ancestor)
          break;
        else if (child.offsetParent.contains(ancestor)) {
          sum -= ancestor[prop];
          break;
        }
        child = child.offsetParent;
      }
      return sum;
    }
    function $449412113267a1fe$export$c826860796309d1b(targetElement, opts) {
      if (document.contains(targetElement)) {
        let root = document.scrollingElement || document.documentElement;
        let isScrollPrevented = window.getComputedStyle(root).overflow === "hidden";
        if (!isScrollPrevented) {
          var _targetElement_scrollIntoView;
          let { left: originalLeft, top: originalTop } = targetElement.getBoundingClientRect();
          targetElement === null || targetElement === void 0 ? void 0 : (_targetElement_scrollIntoView = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView === void 0 ? void 0 : _targetElement_scrollIntoView.call(targetElement, {
            block: "nearest"
          });
          let { left: newLeft, top: newTop } = targetElement.getBoundingClientRect();
          if (Math.abs(originalLeft - newLeft) > 1 || Math.abs(originalTop - newTop) > 1) {
            var _opts_containingElement, _opts_containingElement_scrollIntoView, _targetElement_scrollIntoView1;
            opts === null || opts === void 0 ? void 0 : (_opts_containingElement = opts.containingElement) === null || _opts_containingElement === void 0 ? void 0 : (_opts_containingElement_scrollIntoView = _opts_containingElement.scrollIntoView) === null || _opts_containingElement_scrollIntoView === void 0 ? void 0 : _opts_containingElement_scrollIntoView.call(_opts_containingElement, {
              block: "center",
              inline: "center"
            });
            (_targetElement_scrollIntoView1 = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView1 === void 0 ? void 0 : _targetElement_scrollIntoView1.call(targetElement, {
              block: "nearest"
            });
          }
        } else {
          let scrollParent = (0, $d796e7157ac96470$export$cfa2225e87938781)(targetElement);
          while (targetElement && scrollParent && targetElement !== root && scrollParent !== root) {
            $449412113267a1fe$export$53a0910f038337bd(scrollParent, targetElement);
            targetElement = scrollParent;
            scrollParent = (0, $d796e7157ac96470$export$cfa2225e87938781)(targetElement);
          }
        }
      }
    }
    function $577e795361f19be9$export$60278871457622de(event) {
      if (event.mozInputSource === 0 && event.isTrusted)
        return true;
      if ((0, $9e20cff0af27e8cc$export$a11b0059900ceec8)() && event.pointerType)
        return event.type === "click" && event.buttons === 1;
      return event.detail === 0 && !event.pointerType;
    }
    function $577e795361f19be9$export$29bf1b5f2c56cf63(event) {
      return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
    }
    function $1254e5bb94ac8761$export$7f54fc3180508a52(fn) {
      const ref = (0, $1Yh1N$react.useRef)(null);
      (0, $78605a5d7424e31b$export$e5c5a5f917a5871c)(() => {
        ref.current = fn;
      }, [
        fn
      ]);
      return (0, $1Yh1N$react.useCallback)((...args) => {
        const f = ref.current;
        return f(...args);
      }, []);
    }
  }
});

// node_modules/@react-aria/interactions/dist/main.js
var require_main4 = __commonJS({
  "node_modules/@react-aria/interactions/dist/main.js"(exports, module) {
    var $goTMa$reactariautils = require_main3();
    var $goTMa$react = require_react();
    var $goTMa$reactariassr = require_main2();
    function $parcel$export(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$export(module.exports, "Pressable", () => $e1dbec26039c051d$export$27c701ed9e449e99);
    $parcel$export(module.exports, "PressResponder", () => $3596bae48579386f$export$3351871ee4b288b8);
    $parcel$export(module.exports, "useFocus", () => $5cb73d0ce355b0dc$export$f8168d8dd8fd66e6);
    $parcel$export(module.exports, "isFocusVisible", () => $e77252a287ef94ab$export$b9b3dfddab17db27);
    $parcel$export(module.exports, "getInteractionModality", () => $e77252a287ef94ab$export$630ff653c5ada6a9);
    $parcel$export(module.exports, "setInteractionModality", () => $e77252a287ef94ab$export$8397ddfc504fdb9a);
    $parcel$export(module.exports, "useInteractionModality", () => $e77252a287ef94ab$export$98e20ec92f614cfe);
    $parcel$export(module.exports, "useFocusVisible", () => $e77252a287ef94ab$export$ffd9e5021c1fb2d6);
    $parcel$export(module.exports, "useFocusVisibleListener", () => $e77252a287ef94ab$export$ec71b4b83ac08ec3);
    $parcel$export(module.exports, "useFocusWithin", () => $d16842bbd0359d1b$export$420e68273165f4ec);
    $parcel$export(module.exports, "useHover", () => $ffbc150311c75f01$export$ae780daf29e6d456);
    $parcel$export(module.exports, "useInteractOutside", () => $edcfa848c42f94f4$export$872b660ac5a1ff98);
    $parcel$export(module.exports, "useKeyboard", () => $892d64db2a3c53b0$export$8f71654801c2f7cd);
    $parcel$export(module.exports, "useMove", () => $c09386fc48fa427d$export$36da96379f79f245);
    $parcel$export(module.exports, "usePress", () => $0294ea432cd92340$export$45712eceda6fad21);
    $parcel$export(module.exports, "useScrollWheel", () => $a3dbce0aed7087e2$export$2123ff2b87c81ca);
    $parcel$export(module.exports, "useLongPress", () => $3cd7b5d0eebf0ca9$export$c24ed0104d07eab9);
    var $f7e14e656343df57$var$state = "default";
    var $f7e14e656343df57$var$savedUserSelect = "";
    var $f7e14e656343df57$var$modifiedElementMap = /* @__PURE__ */ new WeakMap();
    function $f7e14e656343df57$export$16a4697467175487(target) {
      if ((0, $goTMa$reactariautils.isIOS)()) {
        if ($f7e14e656343df57$var$state === "default") {
          $f7e14e656343df57$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
          document.documentElement.style.webkitUserSelect = "none";
        }
        $f7e14e656343df57$var$state = "disabled";
      } else if (target instanceof HTMLElement || target instanceof SVGElement) {
        $f7e14e656343df57$var$modifiedElementMap.set(target, target.style.userSelect);
        target.style.userSelect = "none";
      }
    }
    function $f7e14e656343df57$export$b0d6fa1ab32e3295(target) {
      if ((0, $goTMa$reactariautils.isIOS)()) {
        if ($f7e14e656343df57$var$state !== "disabled")
          return;
        $f7e14e656343df57$var$state = "restoring";
        setTimeout(() => {
          (0, $goTMa$reactariautils.runAfterTransition)(() => {
            if ($f7e14e656343df57$var$state === "restoring") {
              if (document.documentElement.style.webkitUserSelect === "none")
                document.documentElement.style.webkitUserSelect = $f7e14e656343df57$var$savedUserSelect || "";
              $f7e14e656343df57$var$savedUserSelect = "";
              $f7e14e656343df57$var$state = "default";
            }
          });
        }, 300);
      } else if (target instanceof HTMLElement || target instanceof SVGElement) {
        if (target && $f7e14e656343df57$var$modifiedElementMap.has(target)) {
          let targetOldUserSelect = $f7e14e656343df57$var$modifiedElementMap.get(target);
          if (target.style.userSelect === "none")
            target.style.userSelect = targetOldUserSelect;
          if (target.getAttribute("style") === "")
            target.removeAttribute("style");
          $f7e14e656343df57$var$modifiedElementMap.delete(target);
        }
      }
    }
    var $01d3f539e91688c8$export$5165eccb35aaadb5 = (0, $parcel$interopDefault($goTMa$react)).createContext(null);
    $01d3f539e91688c8$export$5165eccb35aaadb5.displayName = "PressResponderContext";
    function $0294ea432cd92340$var$usePressResponderContext(props) {
      let context = (0, $goTMa$react.useContext)((0, $01d3f539e91688c8$export$5165eccb35aaadb5));
      if (context) {
        let { register, ...contextProps } = context;
        props = (0, $goTMa$reactariautils.mergeProps)(contextProps, props);
        register();
      }
      (0, $goTMa$reactariautils.useSyncRef)(context, props.ref);
      return props;
    }
    function $0294ea432cd92340$export$45712eceda6fad21(props) {
      let {
        onPress,
        onPressChange,
        onPressStart,
        onPressEnd,
        onPressUp,
        isDisabled,
        isPressed: isPressedProp,
        preventFocusOnPress,
        shouldCancelOnPointerExit,
        allowTextSelectionOnPress,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        ref: _,
        ...domProps
      } = $0294ea432cd92340$var$usePressResponderContext(props);
      let propsRef = (0, $goTMa$react.useRef)(null);
      propsRef.current = {
        onPress,
        onPressChange,
        onPressStart,
        onPressEnd,
        onPressUp,
        isDisabled,
        shouldCancelOnPointerExit
      };
      let [isPressed, setPressed] = (0, $goTMa$react.useState)(false);
      let ref = (0, $goTMa$react.useRef)({
        isPressed: false,
        ignoreEmulatedMouseEvents: false,
        ignoreClickAfterPress: false,
        didFirePressStart: false,
        activePointerId: null,
        target: null,
        isOverTarget: false,
        pointerType: null
      });
      let { addGlobalListener, removeAllGlobalListeners } = (0, $goTMa$reactariautils.useGlobalListeners)();
      let pressProps = (0, $goTMa$react.useMemo)(() => {
        let state = ref.current;
        let triggerPressStart = (originalEvent, pointerType) => {
          let { onPressStart: onPressStart2, onPressChange: onPressChange2, isDisabled: isDisabled2 } = propsRef.current;
          if (isDisabled2 || state.didFirePressStart)
            return;
          if (onPressStart2)
            onPressStart2({
              type: "pressstart",
              pointerType,
              target: originalEvent.currentTarget,
              shiftKey: originalEvent.shiftKey,
              metaKey: originalEvent.metaKey,
              ctrlKey: originalEvent.ctrlKey,
              altKey: originalEvent.altKey
            });
          if (onPressChange2)
            onPressChange2(true);
          state.didFirePressStart = true;
          setPressed(true);
        };
        let triggerPressEnd = (originalEvent, pointerType, wasPressed = true) => {
          let { onPressEnd: onPressEnd2, onPressChange: onPressChange2, onPress: onPress2, isDisabled: isDisabled2 } = propsRef.current;
          if (!state.didFirePressStart)
            return;
          state.ignoreClickAfterPress = true;
          state.didFirePressStart = false;
          if (onPressEnd2)
            onPressEnd2({
              type: "pressend",
              pointerType,
              target: originalEvent.currentTarget,
              shiftKey: originalEvent.shiftKey,
              metaKey: originalEvent.metaKey,
              ctrlKey: originalEvent.ctrlKey,
              altKey: originalEvent.altKey
            });
          if (onPressChange2)
            onPressChange2(false);
          setPressed(false);
          if (onPress2 && wasPressed && !isDisabled2)
            onPress2({
              type: "press",
              pointerType,
              target: originalEvent.currentTarget,
              shiftKey: originalEvent.shiftKey,
              metaKey: originalEvent.metaKey,
              ctrlKey: originalEvent.ctrlKey,
              altKey: originalEvent.altKey
            });
        };
        let triggerPressUp = (originalEvent, pointerType) => {
          let { onPressUp: onPressUp2, isDisabled: isDisabled2 } = propsRef.current;
          if (isDisabled2)
            return;
          if (onPressUp2)
            onPressUp2({
              type: "pressup",
              pointerType,
              target: originalEvent.currentTarget,
              shiftKey: originalEvent.shiftKey,
              metaKey: originalEvent.metaKey,
              ctrlKey: originalEvent.ctrlKey,
              altKey: originalEvent.altKey
            });
        };
        let cancel = (e) => {
          if (state.isPressed) {
            if (state.isOverTarget)
              triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);
            state.isPressed = false;
            state.isOverTarget = false;
            state.activePointerId = null;
            state.pointerType = null;
            removeAllGlobalListeners();
            if (!allowTextSelectionOnPress)
              (0, $f7e14e656343df57$export$b0d6fa1ab32e3295)(state.target);
          }
        };
        let pressProps2 = {
          onKeyDown(e) {
            if ($0294ea432cd92340$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {
              if ($0294ea432cd92340$var$shouldPreventDefaultKeyboard(e.target, e.key))
                e.preventDefault();
              e.stopPropagation();
              if (!state.isPressed && !e.repeat) {
                state.target = e.currentTarget;
                state.isPressed = true;
                triggerPressStart(e, "keyboard");
                addGlobalListener(document, "keyup", onKeyUp, false);
              }
            } else if (e.key === "Enter" && $0294ea432cd92340$var$isHTMLAnchorLink(e.currentTarget))
              e.stopPropagation();
          },
          onKeyUp(e) {
            if ($0294ea432cd92340$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target))
              triggerPressUp($0294ea432cd92340$var$createEvent(state.target, e), "keyboard");
          },
          onClick(e) {
            if (e && !e.currentTarget.contains(e.target))
              return;
            if (e && e.button === 0) {
              e.stopPropagation();
              if (isDisabled)
                e.preventDefault();
              if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === "virtual" || (0, $goTMa$reactariautils.isVirtualClick)(e.nativeEvent))) {
                if (!isDisabled && !preventFocusOnPress)
                  (0, $goTMa$reactariautils.focusWithoutScrolling)(e.currentTarget);
                triggerPressStart(e, "virtual");
                triggerPressUp(e, "virtual");
                triggerPressEnd(e, "virtual");
              }
              state.ignoreEmulatedMouseEvents = false;
              state.ignoreClickAfterPress = false;
            }
          }
        };
        let onKeyUp = (e) => {
          if (state.isPressed && $0294ea432cd92340$var$isValidKeyboardEvent(e, state.target)) {
            if ($0294ea432cd92340$var$shouldPreventDefaultKeyboard(e.target, e.key))
              e.preventDefault();
            e.stopPropagation();
            state.isPressed = false;
            let target = e.target;
            triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), "keyboard", state.target.contains(target));
            removeAllGlobalListeners();
            if (state.target instanceof HTMLElement && state.target.contains(target) && ($0294ea432cd92340$var$isHTMLAnchorLink(state.target) || state.target.getAttribute("role") === "link"))
              state.target.click();
          }
        };
        if (typeof PointerEvent !== "undefined") {
          pressProps2.onPointerDown = (e) => {
            if (e.button !== 0 || !e.currentTarget.contains(e.target))
              return;
            if ((0, $goTMa$reactariautils.isVirtualPointerEvent)(e.nativeEvent)) {
              state.pointerType = "virtual";
              return;
            }
            if ($0294ea432cd92340$var$shouldPreventDefault(e.currentTarget))
              e.preventDefault();
            state.pointerType = e.pointerType;
            e.stopPropagation();
            if (!state.isPressed) {
              state.isPressed = true;
              state.isOverTarget = true;
              state.activePointerId = e.pointerId;
              state.target = e.currentTarget;
              if (!isDisabled && !preventFocusOnPress)
                (0, $goTMa$reactariautils.focusWithoutScrolling)(e.currentTarget);
              if (!allowTextSelectionOnPress)
                (0, $f7e14e656343df57$export$16a4697467175487)(state.target);
              triggerPressStart(e, state.pointerType);
              addGlobalListener(document, "pointermove", onPointerMove, false);
              addGlobalListener(document, "pointerup", onPointerUp, false);
              addGlobalListener(document, "pointercancel", onPointerCancel, false);
            }
          };
          pressProps2.onMouseDown = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            if (e.button === 0) {
              if ($0294ea432cd92340$var$shouldPreventDefault(e.currentTarget))
                e.preventDefault();
              e.stopPropagation();
            }
          };
          pressProps2.onPointerUp = (e) => {
            if (!e.currentTarget.contains(e.target) || state.pointerType === "virtual")
              return;
            if (e.button === 0 && $0294ea432cd92340$var$isOverTarget(e, e.currentTarget))
              triggerPressUp(e, state.pointerType || e.pointerType);
          };
          let onPointerMove = (e) => {
            if (e.pointerId !== state.activePointerId)
              return;
            if ($0294ea432cd92340$var$isOverTarget(e, state.target)) {
              if (!state.isOverTarget) {
                state.isOverTarget = true;
                triggerPressStart($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType);
              }
            } else if (state.isOverTarget) {
              state.isOverTarget = false;
              triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);
              if (propsRef.current.shouldCancelOnPointerExit)
                cancel(e);
            }
          };
          let onPointerUp = (e) => {
            if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {
              if ($0294ea432cd92340$var$isOverTarget(e, state.target))
                triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType);
              else if (state.isOverTarget)
                triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);
              state.isPressed = false;
              state.isOverTarget = false;
              state.activePointerId = null;
              state.pointerType = null;
              removeAllGlobalListeners();
              if (!allowTextSelectionOnPress)
                (0, $f7e14e656343df57$export$b0d6fa1ab32e3295)(state.target);
            }
          };
          let onPointerCancel = (e) => {
            cancel(e);
          };
          pressProps2.onDragStart = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            cancel(e);
          };
        } else {
          pressProps2.onMouseDown = (e) => {
            if (e.button !== 0 || !e.currentTarget.contains(e.target))
              return;
            if ($0294ea432cd92340$var$shouldPreventDefault(e.currentTarget))
              e.preventDefault();
            e.stopPropagation();
            if (state.ignoreEmulatedMouseEvents)
              return;
            state.isPressed = true;
            state.isOverTarget = true;
            state.target = e.currentTarget;
            state.pointerType = (0, $goTMa$reactariautils.isVirtualClick)(e.nativeEvent) ? "virtual" : "mouse";
            if (!isDisabled && !preventFocusOnPress)
              (0, $goTMa$reactariautils.focusWithoutScrolling)(e.currentTarget);
            triggerPressStart(e, state.pointerType);
            addGlobalListener(document, "mouseup", onMouseUp, false);
          };
          pressProps2.onMouseEnter = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            e.stopPropagation();
            if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
              state.isOverTarget = true;
              triggerPressStart(e, state.pointerType);
            }
          };
          pressProps2.onMouseLeave = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            e.stopPropagation();
            if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
              state.isOverTarget = false;
              triggerPressEnd(e, state.pointerType, false);
              if (propsRef.current.shouldCancelOnPointerExit)
                cancel(e);
            }
          };
          pressProps2.onMouseUp = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            if (!state.ignoreEmulatedMouseEvents && e.button === 0)
              triggerPressUp(e, state.pointerType);
          };
          let onMouseUp = (e) => {
            if (e.button !== 0)
              return;
            state.isPressed = false;
            removeAllGlobalListeners();
            if (state.ignoreEmulatedMouseEvents) {
              state.ignoreEmulatedMouseEvents = false;
              return;
            }
            if ($0294ea432cd92340$var$isOverTarget(e, state.target))
              triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType);
            else if (state.isOverTarget)
              triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);
            state.isOverTarget = false;
          };
          pressProps2.onTouchStart = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            e.stopPropagation();
            let touch = $0294ea432cd92340$var$getTouchFromEvent(e.nativeEvent);
            if (!touch)
              return;
            state.activePointerId = touch.identifier;
            state.ignoreEmulatedMouseEvents = true;
            state.isOverTarget = true;
            state.isPressed = true;
            state.target = e.currentTarget;
            state.pointerType = "touch";
            if (!isDisabled && !preventFocusOnPress)
              (0, $goTMa$reactariautils.focusWithoutScrolling)(e.currentTarget);
            if (!allowTextSelectionOnPress)
              (0, $f7e14e656343df57$export$16a4697467175487)(state.target);
            triggerPressStart(e, state.pointerType);
            addGlobalListener(window, "scroll", onScroll, true);
          };
          pressProps2.onTouchMove = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            e.stopPropagation();
            if (!state.isPressed)
              return;
            let touch = $0294ea432cd92340$var$getTouchById(e.nativeEvent, state.activePointerId);
            if (touch && $0294ea432cd92340$var$isOverTarget(touch, e.currentTarget)) {
              if (!state.isOverTarget) {
                state.isOverTarget = true;
                triggerPressStart(e, state.pointerType);
              }
            } else if (state.isOverTarget) {
              state.isOverTarget = false;
              triggerPressEnd(e, state.pointerType, false);
              if (propsRef.current.shouldCancelOnPointerExit)
                cancel(e);
            }
          };
          pressProps2.onTouchEnd = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            e.stopPropagation();
            if (!state.isPressed)
              return;
            let touch = $0294ea432cd92340$var$getTouchById(e.nativeEvent, state.activePointerId);
            if (touch && $0294ea432cd92340$var$isOverTarget(touch, e.currentTarget)) {
              triggerPressUp(e, state.pointerType);
              triggerPressEnd(e, state.pointerType);
            } else if (state.isOverTarget)
              triggerPressEnd(e, state.pointerType, false);
            state.isPressed = false;
            state.activePointerId = null;
            state.isOverTarget = false;
            state.ignoreEmulatedMouseEvents = true;
            if (!allowTextSelectionOnPress)
              (0, $f7e14e656343df57$export$b0d6fa1ab32e3295)(state.target);
            removeAllGlobalListeners();
          };
          pressProps2.onTouchCancel = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            e.stopPropagation();
            if (state.isPressed)
              cancel(e);
          };
          let onScroll = (e) => {
            if (state.isPressed && e.target.contains(state.target))
              cancel({
                currentTarget: state.target,
                shiftKey: false,
                ctrlKey: false,
                metaKey: false,
                altKey: false
              });
          };
          pressProps2.onDragStart = (e) => {
            if (!e.currentTarget.contains(e.target))
              return;
            cancel(e);
          };
        }
        return pressProps2;
      }, [
        addGlobalListener,
        isDisabled,
        preventFocusOnPress,
        removeAllGlobalListeners,
        allowTextSelectionOnPress
      ]);
      (0, $goTMa$react.useEffect)(() => {
        return () => {
          if (!allowTextSelectionOnPress)
            (0, $f7e14e656343df57$export$b0d6fa1ab32e3295)(ref.current.target);
        };
      }, [
        allowTextSelectionOnPress
      ]);
      return {
        isPressed: isPressedProp || isPressed,
        pressProps: (0, $goTMa$reactariautils.mergeProps)(domProps, pressProps)
      };
    }
    function $0294ea432cd92340$var$isHTMLAnchorLink(target) {
      return target.tagName === "A" && target.hasAttribute("href");
    }
    function $0294ea432cd92340$var$isValidKeyboardEvent(event, currentTarget) {
      const { key, code } = event;
      const element = currentTarget;
      const role = element.getAttribute("role");
      return (key === "Enter" || key === " " || key === "Spacebar" || code === "Space") && !(element instanceof HTMLInputElement && !$0294ea432cd92340$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && // A link with a valid href should be handled natively,
      // unless it also has role='button' and was triggered using Space.
      (!$0294ea432cd92340$var$isHTMLAnchorLink(element) || role === "button" && key !== "Enter") && // An element with role='link' should only trigger with Enter key
      !(role === "link" && key !== "Enter");
    }
    function $0294ea432cd92340$var$getTouchFromEvent(event) {
      const { targetTouches } = event;
      if (targetTouches.length > 0)
        return targetTouches[0];
      return null;
    }
    function $0294ea432cd92340$var$getTouchById(event, pointerId) {
      const changedTouches = event.changedTouches;
      for (let i = 0; i < changedTouches.length; i++) {
        const touch = changedTouches[i];
        if (touch.identifier === pointerId)
          return touch;
      }
      return null;
    }
    function $0294ea432cd92340$var$createEvent(target, e) {
      return {
        currentTarget: target,
        shiftKey: e.shiftKey,
        ctrlKey: e.ctrlKey,
        metaKey: e.metaKey,
        altKey: e.altKey
      };
    }
    function $0294ea432cd92340$var$getPointClientRect(point) {
      let offsetX = point.width / 2 || point.radiusX || 0;
      let offsetY = point.height / 2 || point.radiusY || 0;
      return {
        top: point.clientY - offsetY,
        right: point.clientX + offsetX,
        bottom: point.clientY + offsetY,
        left: point.clientX - offsetX
      };
    }
    function $0294ea432cd92340$var$areRectanglesOverlapping(a, b) {
      if (a.left > b.right || b.left > a.right)
        return false;
      if (a.top > b.bottom || b.top > a.bottom)
        return false;
      return true;
    }
    function $0294ea432cd92340$var$isOverTarget(point, target) {
      let rect = target.getBoundingClientRect();
      let pointRect = $0294ea432cd92340$var$getPointClientRect(point);
      return $0294ea432cd92340$var$areRectanglesOverlapping(rect, pointRect);
    }
    function $0294ea432cd92340$var$shouldPreventDefault(target) {
      return !(target instanceof HTMLElement) || !target.draggable;
    }
    function $0294ea432cd92340$var$shouldPreventDefaultKeyboard(target, key) {
      if (target instanceof HTMLInputElement)
        return !$0294ea432cd92340$var$isValidInputKey(target, key);
      if (target instanceof HTMLButtonElement)
        return target.type !== "submit";
      return true;
    }
    var $0294ea432cd92340$var$nonTextInputTypes = /* @__PURE__ */ new Set([
      "checkbox",
      "radio",
      "range",
      "color",
      "file",
      "image",
      "button",
      "submit",
      "reset"
    ]);
    function $0294ea432cd92340$var$isValidInputKey(target, key) {
      return target.type === "checkbox" || target.type === "radio" ? key === " " : $0294ea432cd92340$var$nonTextInputTypes.has(target.type);
    }
    var $e1dbec26039c051d$export$27c701ed9e449e99 = (0, $parcel$interopDefault($goTMa$react)).forwardRef(({ children, ...props }, ref) => {
      let newRef = (0, $goTMa$react.useRef)();
      ref = ref !== null && ref !== void 0 ? ref : newRef;
      let { pressProps } = (0, $0294ea432cd92340$export$45712eceda6fad21)({
        ...props,
        ref
      });
      let child = (0, $parcel$interopDefault($goTMa$react)).Children.only(children);
      return (0, $parcel$interopDefault($goTMa$react)).cloneElement(
        child,
        // @ts-ignore
        {
          ref,
          ...(0, $goTMa$reactariautils.mergeProps)(child.props, pressProps)
        }
      );
    });
    var $3596bae48579386f$export$3351871ee4b288b8 = (0, $parcel$interopDefault($goTMa$react)).forwardRef(({ children, ...props }, ref) => {
      let isRegistered = (0, $goTMa$react.useRef)(false);
      let prevContext = (0, $goTMa$react.useContext)((0, $01d3f539e91688c8$export$5165eccb35aaadb5));
      let context = (0, $goTMa$reactariautils.mergeProps)(prevContext || {}, {
        ...props,
        ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),
        register() {
          isRegistered.current = true;
          if (prevContext)
            prevContext.register();
        }
      });
      (0, $goTMa$reactariautils.useSyncRef)(prevContext, ref);
      (0, $goTMa$react.useEffect)(() => {
        if (!isRegistered.current)
          console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
      }, []);
      return (0, $parcel$interopDefault($goTMa$react)).createElement((0, $01d3f539e91688c8$export$5165eccb35aaadb5).Provider, {
        value: context
      }, children);
    });
    var $625cf83917e112ad$export$905e7fc544a71f36 = class {
      isDefaultPrevented() {
        return this.nativeEvent.defaultPrevented;
      }
      preventDefault() {
        this.defaultPrevented = true;
        this.nativeEvent.preventDefault();
      }
      stopPropagation() {
        this.nativeEvent.stopPropagation();
        this.isPropagationStopped = () => true;
      }
      isPropagationStopped() {
        return false;
      }
      persist() {
      }
      constructor(type, nativeEvent) {
        this.nativeEvent = nativeEvent;
        this.target = nativeEvent.target;
        this.currentTarget = nativeEvent.currentTarget;
        this.relatedTarget = nativeEvent.relatedTarget;
        this.bubbles = nativeEvent.bubbles;
        this.cancelable = nativeEvent.cancelable;
        this.defaultPrevented = nativeEvent.defaultPrevented;
        this.eventPhase = nativeEvent.eventPhase;
        this.isTrusted = nativeEvent.isTrusted;
        this.timeStamp = nativeEvent.timeStamp;
        this.type = type;
      }
    };
    function $625cf83917e112ad$export$715c682d09d639cc(onBlur) {
      let stateRef = (0, $goTMa$react.useRef)({
        isFocused: false,
        onBlur,
        observer: null
      });
      stateRef.current.onBlur = onBlur;
      (0, $goTMa$reactariautils.useLayoutEffect)(() => {
        const state = stateRef.current;
        return () => {
          if (state.observer) {
            state.observer.disconnect();
            state.observer = null;
          }
        };
      }, []);
      return (0, $goTMa$react.useCallback)((e) => {
        if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {
          stateRef.current.isFocused = true;
          let target = e.target;
          let onBlurHandler = (e2) => {
            var _stateRef_current, _stateRef_current_onBlur;
            stateRef.current.isFocused = false;
            if (target.disabled)
              (_stateRef_current_onBlur = (_stateRef_current = stateRef.current).onBlur) === null || _stateRef_current_onBlur === void 0 ? void 0 : _stateRef_current_onBlur.call(_stateRef_current, new $625cf83917e112ad$export$905e7fc544a71f36("blur", e2));
            if (stateRef.current.observer) {
              stateRef.current.observer.disconnect();
              stateRef.current.observer = null;
            }
          };
          target.addEventListener("focusout", onBlurHandler, {
            once: true
          });
          stateRef.current.observer = new MutationObserver(() => {
            if (stateRef.current.isFocused && target.disabled) {
              stateRef.current.observer.disconnect();
              target.dispatchEvent(new FocusEvent("blur"));
              target.dispatchEvent(new FocusEvent("focusout", {
                bubbles: true
              }));
            }
          });
          stateRef.current.observer.observe(target, {
            attributes: true,
            attributeFilter: [
              "disabled"
            ]
          });
        }
      }, []);
    }
    function $5cb73d0ce355b0dc$export$f8168d8dd8fd66e6(props) {
      let { isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props;
      const onBlur = (0, $goTMa$react.useCallback)((e) => {
        if (e.target === e.currentTarget) {
          if (onBlurProp)
            onBlurProp(e);
          if (onFocusChange)
            onFocusChange(false);
          return true;
        }
      }, [
        onBlurProp,
        onFocusChange
      ]);
      const onSyntheticFocus = (0, $625cf83917e112ad$export$715c682d09d639cc)(onBlur);
      const onFocus = (0, $goTMa$react.useCallback)((e) => {
        if (e.target === e.currentTarget && document.activeElement === e.target) {
          if (onFocusProp)
            onFocusProp(e);
          if (onFocusChange)
            onFocusChange(true);
          onSyntheticFocus(e);
        }
      }, [
        onFocusChange,
        onFocusProp,
        onSyntheticFocus
      ]);
      return {
        focusProps: {
          onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : void 0,
          onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : void 0
        }
      };
    }
    var $e77252a287ef94ab$var$currentModality = null;
    var $e77252a287ef94ab$var$changeHandlers = /* @__PURE__ */ new Set();
    var $e77252a287ef94ab$var$hasSetupGlobalListeners = false;
    var $e77252a287ef94ab$var$hasEventBeforeFocus = false;
    var $e77252a287ef94ab$var$hasBlurredWindowRecently = false;
    var $e77252a287ef94ab$var$FOCUS_VISIBLE_INPUT_KEYS = {
      Tab: true,
      Escape: true
    };
    function $e77252a287ef94ab$var$triggerChangeHandlers(modality, e) {
      for (let handler of $e77252a287ef94ab$var$changeHandlers)
        handler(modality, e);
    }
    function $e77252a287ef94ab$var$isValidKey(e) {
      return !(e.metaKey || !(0, $goTMa$reactariautils.isMac)() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
    }
    function $e77252a287ef94ab$var$handleKeyboardEvent(e) {
      $e77252a287ef94ab$var$hasEventBeforeFocus = true;
      if ($e77252a287ef94ab$var$isValidKey(e)) {
        $e77252a287ef94ab$var$currentModality = "keyboard";
        $e77252a287ef94ab$var$triggerChangeHandlers("keyboard", e);
      }
    }
    function $e77252a287ef94ab$var$handlePointerEvent(e) {
      $e77252a287ef94ab$var$currentModality = "pointer";
      if (e.type === "mousedown" || e.type === "pointerdown") {
        $e77252a287ef94ab$var$hasEventBeforeFocus = true;
        $e77252a287ef94ab$var$triggerChangeHandlers("pointer", e);
      }
    }
    function $e77252a287ef94ab$var$handleClickEvent(e) {
      if ((0, $goTMa$reactariautils.isVirtualClick)(e)) {
        $e77252a287ef94ab$var$hasEventBeforeFocus = true;
        $e77252a287ef94ab$var$currentModality = "virtual";
      }
    }
    function $e77252a287ef94ab$var$handleFocusEvent(e) {
      if (e.target === window || e.target === document)
        return;
      if (!$e77252a287ef94ab$var$hasEventBeforeFocus && !$e77252a287ef94ab$var$hasBlurredWindowRecently) {
        $e77252a287ef94ab$var$currentModality = "virtual";
        $e77252a287ef94ab$var$triggerChangeHandlers("virtual", e);
      }
      $e77252a287ef94ab$var$hasEventBeforeFocus = false;
      $e77252a287ef94ab$var$hasBlurredWindowRecently = false;
    }
    function $e77252a287ef94ab$var$handleWindowBlur() {
      $e77252a287ef94ab$var$hasEventBeforeFocus = false;
      $e77252a287ef94ab$var$hasBlurredWindowRecently = true;
    }
    function $e77252a287ef94ab$var$setupGlobalFocusEvents() {
      if (typeof window === "undefined" || $e77252a287ef94ab$var$hasSetupGlobalListeners)
        return;
      let focus = HTMLElement.prototype.focus;
      HTMLElement.prototype.focus = function() {
        $e77252a287ef94ab$var$hasEventBeforeFocus = true;
        focus.apply(this, arguments);
      };
      document.addEventListener("keydown", $e77252a287ef94ab$var$handleKeyboardEvent, true);
      document.addEventListener("keyup", $e77252a287ef94ab$var$handleKeyboardEvent, true);
      document.addEventListener("click", $e77252a287ef94ab$var$handleClickEvent, true);
      window.addEventListener("focus", $e77252a287ef94ab$var$handleFocusEvent, true);
      window.addEventListener("blur", $e77252a287ef94ab$var$handleWindowBlur, false);
      if (typeof PointerEvent !== "undefined") {
        document.addEventListener("pointerdown", $e77252a287ef94ab$var$handlePointerEvent, true);
        document.addEventListener("pointermove", $e77252a287ef94ab$var$handlePointerEvent, true);
        document.addEventListener("pointerup", $e77252a287ef94ab$var$handlePointerEvent, true);
      } else {
        document.addEventListener("mousedown", $e77252a287ef94ab$var$handlePointerEvent, true);
        document.addEventListener("mousemove", $e77252a287ef94ab$var$handlePointerEvent, true);
        document.addEventListener("mouseup", $e77252a287ef94ab$var$handlePointerEvent, true);
      }
      $e77252a287ef94ab$var$hasSetupGlobalListeners = true;
    }
    if (typeof document !== "undefined") {
      if (document.readyState !== "loading")
        $e77252a287ef94ab$var$setupGlobalFocusEvents();
      else
        document.addEventListener("DOMContentLoaded", $e77252a287ef94ab$var$setupGlobalFocusEvents);
    }
    function $e77252a287ef94ab$export$b9b3dfddab17db27() {
      return $e77252a287ef94ab$var$currentModality !== "pointer";
    }
    function $e77252a287ef94ab$export$630ff653c5ada6a9() {
      return $e77252a287ef94ab$var$currentModality;
    }
    function $e77252a287ef94ab$export$8397ddfc504fdb9a(modality) {
      $e77252a287ef94ab$var$currentModality = modality;
      $e77252a287ef94ab$var$triggerChangeHandlers(modality, null);
    }
    function $e77252a287ef94ab$export$98e20ec92f614cfe() {
      $e77252a287ef94ab$var$setupGlobalFocusEvents();
      let [modality, setModality] = (0, $goTMa$react.useState)($e77252a287ef94ab$var$currentModality);
      (0, $goTMa$react.useEffect)(() => {
        let handler = () => {
          setModality($e77252a287ef94ab$var$currentModality);
        };
        $e77252a287ef94ab$var$changeHandlers.add(handler);
        return () => {
          $e77252a287ef94ab$var$changeHandlers.delete(handler);
        };
      }, []);
      return (0, $goTMa$reactariassr.useIsSSR)() ? null : modality;
    }
    function $e77252a287ef94ab$var$isKeyboardFocusEvent(isTextInput, modality, e) {
      return !(isTextInput && modality === "keyboard" && e instanceof KeyboardEvent && !$e77252a287ef94ab$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
    }
    function $e77252a287ef94ab$export$ffd9e5021c1fb2d6(props = {}) {
      let { isTextInput, autoFocus } = props;
      let [isFocusVisibleState, setFocusVisible] = (0, $goTMa$react.useState)(autoFocus || $e77252a287ef94ab$export$b9b3dfddab17db27());
      $e77252a287ef94ab$export$ec71b4b83ac08ec3((isFocusVisible) => {
        setFocusVisible(isFocusVisible);
      }, [
        isTextInput
      ], {
        isTextInput
      });
      return {
        isFocusVisible: isFocusVisibleState
      };
    }
    function $e77252a287ef94ab$export$ec71b4b83ac08ec3(fn, deps, opts) {
      $e77252a287ef94ab$var$setupGlobalFocusEvents();
      (0, $goTMa$react.useEffect)(() => {
        let handler = (modality, e) => {
          if (!$e77252a287ef94ab$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e))
            return;
          fn($e77252a287ef94ab$export$b9b3dfddab17db27());
        };
        $e77252a287ef94ab$var$changeHandlers.add(handler);
        return () => {
          $e77252a287ef94ab$var$changeHandlers.delete(handler);
        };
      }, deps);
    }
    function $d16842bbd0359d1b$export$420e68273165f4ec(props) {
      let { isDisabled, onBlurWithin, onFocusWithin, onFocusWithinChange } = props;
      let state = (0, $goTMa$react.useRef)({
        isFocusWithin: false
      });
      let onBlur = (0, $goTMa$react.useCallback)((e) => {
        if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
          state.current.isFocusWithin = false;
          if (onBlurWithin)
            onBlurWithin(e);
          if (onFocusWithinChange)
            onFocusWithinChange(false);
        }
      }, [
        onBlurWithin,
        onFocusWithinChange,
        state
      ]);
      let onSyntheticFocus = (0, $625cf83917e112ad$export$715c682d09d639cc)(onBlur);
      let onFocus = (0, $goTMa$react.useCallback)((e) => {
        if (!state.current.isFocusWithin && document.activeElement === e.target) {
          if (onFocusWithin)
            onFocusWithin(e);
          if (onFocusWithinChange)
            onFocusWithinChange(true);
          state.current.isFocusWithin = true;
          onSyntheticFocus(e);
        }
      }, [
        onFocusWithin,
        onFocusWithinChange,
        onSyntheticFocus
      ]);
      if (isDisabled)
        return {
          focusWithinProps: {
            onFocus: null,
            onBlur: null
          }
        };
      return {
        focusWithinProps: {
          onFocus,
          onBlur
        }
      };
    }
    var $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = false;
    var $ffbc150311c75f01$var$hoverCount = 0;
    function $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents() {
      $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = true;
      setTimeout(() => {
        $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = false;
      }, 50);
    }
    function $ffbc150311c75f01$var$handleGlobalPointerEvent(e) {
      if (e.pointerType === "touch")
        $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents();
    }
    function $ffbc150311c75f01$var$setupGlobalTouchEvents() {
      if (typeof document === "undefined")
        return;
      if (typeof PointerEvent !== "undefined")
        document.addEventListener("pointerup", $ffbc150311c75f01$var$handleGlobalPointerEvent);
      else
        document.addEventListener("touchend", $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents);
      $ffbc150311c75f01$var$hoverCount++;
      return () => {
        $ffbc150311c75f01$var$hoverCount--;
        if ($ffbc150311c75f01$var$hoverCount > 0)
          return;
        if (typeof PointerEvent !== "undefined")
          document.removeEventListener("pointerup", $ffbc150311c75f01$var$handleGlobalPointerEvent);
        else
          document.removeEventListener("touchend", $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents);
      };
    }
    function $ffbc150311c75f01$export$ae780daf29e6d456(props) {
      let { onHoverStart, onHoverChange, onHoverEnd, isDisabled } = props;
      let [isHovered, setHovered] = (0, $goTMa$react.useState)(false);
      let state = (0, $goTMa$react.useRef)({
        isHovered: false,
        ignoreEmulatedMouseEvents: false,
        pointerType: "",
        target: null
      }).current;
      (0, $goTMa$react.useEffect)($ffbc150311c75f01$var$setupGlobalTouchEvents, []);
      let { hoverProps, triggerHoverEnd } = (0, $goTMa$react.useMemo)(() => {
        let triggerHoverStart = (event, pointerType) => {
          state.pointerType = pointerType;
          if (isDisabled || pointerType === "touch" || state.isHovered || !event.currentTarget.contains(event.target))
            return;
          state.isHovered = true;
          let target = event.currentTarget;
          state.target = target;
          if (onHoverStart)
            onHoverStart({
              type: "hoverstart",
              target,
              pointerType
            });
          if (onHoverChange)
            onHoverChange(true);
          setHovered(true);
        };
        let triggerHoverEnd2 = (event, pointerType) => {
          state.pointerType = "";
          state.target = null;
          if (pointerType === "touch" || !state.isHovered)
            return;
          state.isHovered = false;
          let target = event.currentTarget;
          if (onHoverEnd)
            onHoverEnd({
              type: "hoverend",
              target,
              pointerType
            });
          if (onHoverChange)
            onHoverChange(false);
          setHovered(false);
        };
        let hoverProps2 = {};
        if (typeof PointerEvent !== "undefined") {
          hoverProps2.onPointerEnter = (e) => {
            if ($ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents && e.pointerType === "mouse")
              return;
            triggerHoverStart(e, e.pointerType);
          };
          hoverProps2.onPointerLeave = (e) => {
            if (!isDisabled && e.currentTarget.contains(e.target))
              triggerHoverEnd2(e, e.pointerType);
          };
        } else {
          hoverProps2.onTouchStart = () => {
            state.ignoreEmulatedMouseEvents = true;
          };
          hoverProps2.onMouseEnter = (e) => {
            if (!state.ignoreEmulatedMouseEvents && !$ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents)
              triggerHoverStart(e, "mouse");
            state.ignoreEmulatedMouseEvents = false;
          };
          hoverProps2.onMouseLeave = (e) => {
            if (!isDisabled && e.currentTarget.contains(e.target))
              triggerHoverEnd2(e, "mouse");
          };
        }
        return {
          hoverProps: hoverProps2,
          triggerHoverEnd: triggerHoverEnd2
        };
      }, [
        onHoverStart,
        onHoverChange,
        onHoverEnd,
        isDisabled,
        state
      ]);
      (0, $goTMa$react.useEffect)(() => {
        if (isDisabled)
          triggerHoverEnd({
            currentTarget: state.target
          }, state.pointerType);
      }, [
        isDisabled
      ]);
      return {
        hoverProps,
        isHovered
      };
    }
    function $edcfa848c42f94f4$export$872b660ac5a1ff98(props) {
      let { ref, onInteractOutside, isDisabled, onInteractOutsideStart } = props;
      let stateRef = (0, $goTMa$react.useRef)({
        isPointerDown: false,
        ignoreEmulatedMouseEvents: false,
        onInteractOutside,
        onInteractOutsideStart
      });
      let state = stateRef.current;
      state.onInteractOutside = onInteractOutside;
      state.onInteractOutsideStart = onInteractOutsideStart;
      (0, $goTMa$react.useEffect)(() => {
        if (isDisabled)
          return;
        let onPointerDown = (e) => {
          if ($edcfa848c42f94f4$var$isValidEvent(e, ref) && state.onInteractOutside) {
            if (state.onInteractOutsideStart)
              state.onInteractOutsideStart(e);
            state.isPointerDown = true;
          }
        };
        if (typeof PointerEvent !== "undefined") {
          let onPointerUp = (e) => {
            if (state.isPointerDown && state.onInteractOutside && $edcfa848c42f94f4$var$isValidEvent(e, ref))
              state.onInteractOutside(e);
            state.isPointerDown = false;
          };
          document.addEventListener("pointerdown", onPointerDown, true);
          document.addEventListener("pointerup", onPointerUp, true);
          return () => {
            document.removeEventListener("pointerdown", onPointerDown, true);
            document.removeEventListener("pointerup", onPointerUp, true);
          };
        } else {
          let onMouseUp = (e) => {
            if (state.ignoreEmulatedMouseEvents)
              state.ignoreEmulatedMouseEvents = false;
            else if (state.isPointerDown && state.onInteractOutside && $edcfa848c42f94f4$var$isValidEvent(e, ref))
              state.onInteractOutside(e);
            state.isPointerDown = false;
          };
          let onTouchEnd = (e) => {
            state.ignoreEmulatedMouseEvents = true;
            if (state.onInteractOutside && state.isPointerDown && $edcfa848c42f94f4$var$isValidEvent(e, ref))
              state.onInteractOutside(e);
            state.isPointerDown = false;
          };
          document.addEventListener("mousedown", onPointerDown, true);
          document.addEventListener("mouseup", onMouseUp, true);
          document.addEventListener("touchstart", onPointerDown, true);
          document.addEventListener("touchend", onTouchEnd, true);
          return () => {
            document.removeEventListener("mousedown", onPointerDown, true);
            document.removeEventListener("mouseup", onMouseUp, true);
            document.removeEventListener("touchstart", onPointerDown, true);
            document.removeEventListener("touchend", onTouchEnd, true);
          };
        }
      }, [
        ref,
        state,
        isDisabled
      ]);
    }
    function $edcfa848c42f94f4$var$isValidEvent(event, ref) {
      if (event.button > 0)
        return false;
      if (event.target) {
        const ownerDocument = event.target.ownerDocument;
        if (!ownerDocument || !ownerDocument.documentElement.contains(event.target))
          return false;
        if (event.target.closest("[data-react-aria-top-layer]"))
          return false;
      }
      return ref.current && !ref.current.contains(event.target);
    }
    function $951fbcbbca8db6ce$export$48d1ea6320830260(handler) {
      if (!handler)
        return;
      let shouldStopPropagation = true;
      return (e) => {
        let event = {
          ...e,
          preventDefault() {
            e.preventDefault();
          },
          isDefaultPrevented() {
            return e.isDefaultPrevented();
          },
          stopPropagation() {
            console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
          },
          continuePropagation() {
            shouldStopPropagation = false;
          }
        };
        handler(event);
        if (shouldStopPropagation)
          e.stopPropagation();
      };
    }
    function $892d64db2a3c53b0$export$8f71654801c2f7cd(props) {
      return {
        keyboardProps: props.isDisabled ? {} : {
          onKeyDown: (0, $951fbcbbca8db6ce$export$48d1ea6320830260)(props.onKeyDown),
          onKeyUp: (0, $951fbcbbca8db6ce$export$48d1ea6320830260)(props.onKeyUp)
        }
      };
    }
    function $c09386fc48fa427d$export$36da96379f79f245(props) {
      let { onMoveStart, onMove, onMoveEnd } = props;
      let state = (0, $goTMa$react.useRef)({
        didMove: false,
        lastPosition: null,
        id: null
      });
      let { addGlobalListener, removeGlobalListener } = (0, $goTMa$reactariautils.useGlobalListeners)();
      let moveProps = (0, $goTMa$react.useMemo)(() => {
        let moveProps2 = {};
        let start = () => {
          (0, $f7e14e656343df57$export$16a4697467175487)();
          state.current.didMove = false;
        };
        let move = (originalEvent, pointerType, deltaX, deltaY) => {
          if (deltaX === 0 && deltaY === 0)
            return;
          if (!state.current.didMove) {
            state.current.didMove = true;
            onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
              type: "movestart",
              pointerType,
              shiftKey: originalEvent.shiftKey,
              metaKey: originalEvent.metaKey,
              ctrlKey: originalEvent.ctrlKey,
              altKey: originalEvent.altKey
            });
          }
          onMove({
            type: "move",
            pointerType,
            deltaX,
            deltaY,
            shiftKey: originalEvent.shiftKey,
            metaKey: originalEvent.metaKey,
            ctrlKey: originalEvent.ctrlKey,
            altKey: originalEvent.altKey
          });
        };
        let end = (originalEvent, pointerType) => {
          (0, $f7e14e656343df57$export$b0d6fa1ab32e3295)();
          if (state.current.didMove)
            onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
              type: "moveend",
              pointerType,
              shiftKey: originalEvent.shiftKey,
              metaKey: originalEvent.metaKey,
              ctrlKey: originalEvent.ctrlKey,
              altKey: originalEvent.altKey
            });
        };
        if (typeof PointerEvent === "undefined") {
          let onMouseMove = (e) => {
            if (e.button === 0) {
              move(e, "mouse", e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
              state.current.lastPosition = {
                pageX: e.pageX,
                pageY: e.pageY
              };
            }
          };
          let onMouseUp = (e) => {
            if (e.button === 0) {
              end(e, "mouse");
              removeGlobalListener(window, "mousemove", onMouseMove, false);
              removeGlobalListener(window, "mouseup", onMouseUp, false);
            }
          };
          moveProps2.onMouseDown = (e) => {
            if (e.button === 0) {
              start();
              e.stopPropagation();
              e.preventDefault();
              state.current.lastPosition = {
                pageX: e.pageX,
                pageY: e.pageY
              };
              addGlobalListener(window, "mousemove", onMouseMove, false);
              addGlobalListener(window, "mouseup", onMouseUp, false);
            }
          };
          let onTouchMove = (e) => {
            let touch = [
              ...e.changedTouches
            ].findIndex(({ identifier }) => identifier === state.current.id);
            if (touch >= 0) {
              let { pageX, pageY } = e.changedTouches[touch];
              move(e, "touch", pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);
              state.current.lastPosition = {
                pageX,
                pageY
              };
            }
          };
          let onTouchEnd = (e) => {
            let touch = [
              ...e.changedTouches
            ].findIndex(({ identifier }) => identifier === state.current.id);
            if (touch >= 0) {
              end(e, "touch");
              state.current.id = null;
              removeGlobalListener(window, "touchmove", onTouchMove);
              removeGlobalListener(window, "touchend", onTouchEnd);
              removeGlobalListener(window, "touchcancel", onTouchEnd);
            }
          };
          moveProps2.onTouchStart = (e) => {
            if (e.changedTouches.length === 0 || state.current.id != null)
              return;
            let { pageX, pageY, identifier } = e.changedTouches[0];
            start();
            e.stopPropagation();
            e.preventDefault();
            state.current.lastPosition = {
              pageX,
              pageY
            };
            state.current.id = identifier;
            addGlobalListener(window, "touchmove", onTouchMove, false);
            addGlobalListener(window, "touchend", onTouchEnd, false);
            addGlobalListener(window, "touchcancel", onTouchEnd, false);
          };
        } else {
          let onPointerMove = (e) => {
            if (e.pointerId === state.current.id) {
              let pointerType = e.pointerType || "mouse";
              move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
              state.current.lastPosition = {
                pageX: e.pageX,
                pageY: e.pageY
              };
            }
          };
          let onPointerUp = (e) => {
            if (e.pointerId === state.current.id) {
              let pointerType = e.pointerType || "mouse";
              end(e, pointerType);
              state.current.id = null;
              removeGlobalListener(window, "pointermove", onPointerMove, false);
              removeGlobalListener(window, "pointerup", onPointerUp, false);
              removeGlobalListener(window, "pointercancel", onPointerUp, false);
            }
          };
          moveProps2.onPointerDown = (e) => {
            if (e.button === 0 && state.current.id == null) {
              start();
              e.stopPropagation();
              e.preventDefault();
              state.current.lastPosition = {
                pageX: e.pageX,
                pageY: e.pageY
              };
              state.current.id = e.pointerId;
              addGlobalListener(window, "pointermove", onPointerMove, false);
              addGlobalListener(window, "pointerup", onPointerUp, false);
              addGlobalListener(window, "pointercancel", onPointerUp, false);
            }
          };
        }
        let triggerKeyboardMove = (e, deltaX, deltaY) => {
          start();
          move(e, "keyboard", deltaX, deltaY);
          end(e, "keyboard");
        };
        moveProps2.onKeyDown = (e) => {
          switch (e.key) {
            case "Left":
            case "ArrowLeft":
              e.preventDefault();
              e.stopPropagation();
              triggerKeyboardMove(e, -1, 0);
              break;
            case "Right":
            case "ArrowRight":
              e.preventDefault();
              e.stopPropagation();
              triggerKeyboardMove(e, 1, 0);
              break;
            case "Up":
            case "ArrowUp":
              e.preventDefault();
              e.stopPropagation();
              triggerKeyboardMove(e, 0, -1);
              break;
            case "Down":
            case "ArrowDown":
              e.preventDefault();
              e.stopPropagation();
              triggerKeyboardMove(e, 0, 1);
              break;
          }
        };
        return moveProps2;
      }, [
        state,
        onMoveStart,
        onMove,
        onMoveEnd,
        addGlobalListener,
        removeGlobalListener
      ]);
      return {
        moveProps
      };
    }
    function $a3dbce0aed7087e2$export$2123ff2b87c81ca(props, ref) {
      let { onScroll, isDisabled } = props;
      let onScrollHandler = (0, $goTMa$react.useCallback)((e) => {
        if (e.ctrlKey)
          return;
        e.preventDefault();
        e.stopPropagation();
        if (onScroll)
          onScroll({
            deltaX: e.deltaX,
            deltaY: e.deltaY
          });
      }, [
        onScroll
      ]);
      (0, $goTMa$reactariautils.useEvent)(ref, "wheel", isDisabled ? null : onScrollHandler);
    }
    var $3cd7b5d0eebf0ca9$var$DEFAULT_THRESHOLD = 500;
    function $3cd7b5d0eebf0ca9$export$c24ed0104d07eab9(props) {
      let { isDisabled, onLongPressStart, onLongPressEnd, onLongPress, threshold = $3cd7b5d0eebf0ca9$var$DEFAULT_THRESHOLD, accessibilityDescription } = props;
      const timeRef = (0, $goTMa$react.useRef)(null);
      let { addGlobalListener, removeGlobalListener } = (0, $goTMa$reactariautils.useGlobalListeners)();
      let { pressProps } = (0, $0294ea432cd92340$export$45712eceda6fad21)({
        isDisabled,
        onPressStart(e) {
          if (e.pointerType === "mouse" || e.pointerType === "touch") {
            if (onLongPressStart)
              onLongPressStart({
                ...e,
                type: "longpressstart"
              });
            timeRef.current = setTimeout(() => {
              e.target.dispatchEvent(new PointerEvent("pointercancel", {
                bubbles: true
              }));
              if (onLongPress)
                onLongPress({
                  ...e,
                  type: "longpress"
                });
              timeRef.current = null;
            }, threshold);
            if (e.pointerType === "touch") {
              let onContextMenu = (e2) => {
                e2.preventDefault();
              };
              addGlobalListener(e.target, "contextmenu", onContextMenu, {
                once: true
              });
              addGlobalListener(window, "pointerup", () => {
                setTimeout(() => {
                  removeGlobalListener(e.target, "contextmenu", onContextMenu);
                }, 30);
              }, {
                once: true
              });
            }
          }
        },
        onPressEnd(e) {
          if (timeRef.current)
            clearTimeout(timeRef.current);
          if (onLongPressEnd && (e.pointerType === "mouse" || e.pointerType === "touch"))
            onLongPressEnd({
              ...e,
              type: "longpressend"
            });
        }
      });
      let descriptionProps = (0, $goTMa$reactariautils.useDescription)(onLongPress && !isDisabled ? accessibilityDescription : null);
      return {
        longPressProps: (0, $goTMa$reactariautils.mergeProps)(pressProps, descriptionProps)
      };
    }
  }
});

// node_modules/@react-aria/focus/dist/main.js
var require_main5 = __commonJS({
  "node_modules/@react-aria/focus/dist/main.js"(exports, module) {
    var $aB6Cp$swchelperslib_define_propertyjs = require_define_property();
    var $aB6Cp$react = require_react();
    var $aB6Cp$reactariautils = require_main3();
    var $aB6Cp$reactariainteractions = require_main4();
    var $aB6Cp$clsx = (init_clsx_m(), __toCommonJS(clsx_m_exports));
    function $parcel$export(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$interopDefault(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$export(module.exports, "FocusScope", () => $a7a032acae3ddda9$export$20e40289641fbbb6);
    $parcel$export(module.exports, "useFocusManager", () => $a7a032acae3ddda9$export$10c5169755ce7bd7);
    $parcel$export(module.exports, "getFocusableTreeWalker", () => $a7a032acae3ddda9$export$2d6ec8fc375ceafa);
    $parcel$export(module.exports, "createFocusManager", () => $a7a032acae3ddda9$export$c5251b9e124bf29);
    $parcel$export(module.exports, "isElementInChildOfActiveScope", () => $a7a032acae3ddda9$export$1258395f99bf9cbf);
    $parcel$export(module.exports, "FocusRing", () => $dfd8c70b928eb1b3$export$1a38b4ad7f578e1d);
    $parcel$export(module.exports, "FocusableProvider", () => $fb504d83237fd6ac$export$13f3202a3e5ddd5);
    $parcel$export(module.exports, "useFocusable", () => $fb504d83237fd6ac$export$4c014de7c8940b4c);
    $parcel$export(module.exports, "useFocusRing", () => $581a96d6eb128c1b$export$4e328f61c538687f);
    $parcel$export(module.exports, "focusSafely", () => $1c7f9157d722357d$export$80f3e147d781571c);
    $parcel$export(module.exports, "useHasTabbableChild", () => $259c6413a286f2e6$export$eac1895992b9f3d6);
    function $1c7f9157d722357d$export$80f3e147d781571c(element) {
      if ((0, $aB6Cp$reactariainteractions.getInteractionModality)() === "virtual") {
        let lastFocusedElement = document.activeElement;
        (0, $aB6Cp$reactariautils.runAfterTransition)(() => {
          if (document.activeElement === lastFocusedElement && document.contains(element))
            (0, $aB6Cp$reactariautils.focusWithoutScrolling)(element);
        });
      } else
        (0, $aB6Cp$reactariautils.focusWithoutScrolling)(element);
    }
    function $d5156037ad898a4d$var$isStyleVisible(element) {
      if (!(element instanceof HTMLElement) && !(element instanceof SVGElement))
        return false;
      let { display, visibility } = element.style;
      let isVisible = display !== "none" && visibility !== "hidden" && visibility !== "collapse";
      if (isVisible) {
        const { getComputedStyle: getComputedStyle2 } = element.ownerDocument.defaultView;
        let { display: computedDisplay, visibility: computedVisibility } = getComputedStyle2(element);
        isVisible = computedDisplay !== "none" && computedVisibility !== "hidden" && computedVisibility !== "collapse";
      }
      return isVisible;
    }
    function $d5156037ad898a4d$var$isAttributeVisible(element, childElement) {
      return !element.hasAttribute("hidden") && (element.nodeName === "DETAILS" && childElement && childElement.nodeName !== "SUMMARY" ? element.hasAttribute("open") : true);
    }
    function $d5156037ad898a4d$export$e989c0fffaa6b27a(element, childElement) {
      return element.nodeName !== "#comment" && $d5156037ad898a4d$var$isStyleVisible(element) && $d5156037ad898a4d$var$isAttributeVisible(element, childElement) && (!element.parentElement || $d5156037ad898a4d$export$e989c0fffaa6b27a(element.parentElement, element));
    }
    var $a7a032acae3ddda9$var$FocusContext = (0, $parcel$interopDefault($aB6Cp$react)).createContext(null);
    var $a7a032acae3ddda9$var$activeScope = null;
    function $a7a032acae3ddda9$export$20e40289641fbbb6(props) {
      let { children, contain, restoreFocus, autoFocus } = props;
      let startRef = (0, $aB6Cp$react.useRef)();
      let endRef = (0, $aB6Cp$react.useRef)();
      let scopeRef = (0, $aB6Cp$react.useRef)([]);
      let { parentNode } = (0, $aB6Cp$react.useContext)($a7a032acae3ddda9$var$FocusContext) || {};
      let node = (0, $aB6Cp$react.useMemo)(() => new $a7a032acae3ddda9$var$TreeNode({
        scopeRef
      }), [
        scopeRef
      ]);
      (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
        let parent = parentNode || $a7a032acae3ddda9$export$d06fae2ee68b101e.root;
        if ($a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $a7a032acae3ddda9$var$activeScope && !$a7a032acae3ddda9$var$isAncestorScope($a7a032acae3ddda9$var$activeScope, parent.scopeRef)) {
          let activeNode = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode($a7a032acae3ddda9$var$activeScope);
          if (activeNode)
            parent = activeNode;
        }
        parent.addChild(node);
        $a7a032acae3ddda9$export$d06fae2ee68b101e.addNode(node);
      }, [
        node,
        parentNode
      ]);
      (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
        let node2 = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scopeRef);
        node2.contain = contain;
      }, [
        contain
      ]);
      (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
        let node2 = startRef.current.nextSibling;
        let nodes = [];
        while (node2 && node2 !== endRef.current) {
          nodes.push(node2);
          node2 = node2.nextSibling;
        }
        scopeRef.current = nodes;
      }, [
        children
      ]);
      $a7a032acae3ddda9$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);
      $a7a032acae3ddda9$var$useFocusContainment(scopeRef, contain);
      $a7a032acae3ddda9$var$useRestoreFocus(scopeRef, restoreFocus, contain);
      $a7a032acae3ddda9$var$useAutoFocus(scopeRef, autoFocus);
      (0, $aB6Cp$react.useEffect)(() => {
        if (scopeRef) {
          let activeElement = document.activeElement;
          let scope = null;
          if ($a7a032acae3ddda9$var$isElementInScope(activeElement, scopeRef.current)) {
            for (let node2 of $a7a032acae3ddda9$export$d06fae2ee68b101e.traverse())
              if ($a7a032acae3ddda9$var$isElementInScope(activeElement, node2.scopeRef.current))
                scope = node2;
            if (scope === $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scopeRef))
              $a7a032acae3ddda9$var$activeScope = scope.scopeRef;
          }
          return () => {
            let parentScope = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scopeRef).parent.scopeRef;
            if ((scopeRef === $a7a032acae3ddda9$var$activeScope || $a7a032acae3ddda9$var$isAncestorScope(scopeRef, $a7a032acae3ddda9$var$activeScope)) && (!parentScope || $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(parentScope)))
              $a7a032acae3ddda9$var$activeScope = parentScope;
            $a7a032acae3ddda9$export$d06fae2ee68b101e.removeTreeNode(scopeRef);
          };
        }
      }, [
        scopeRef
      ]);
      let focusManager = (0, $aB6Cp$react.useMemo)(() => $a7a032acae3ddda9$var$createFocusManagerForScope(scopeRef), []);
      let value = (0, $aB6Cp$react.useMemo)(() => ({
        focusManager,
        parentNode: node
      }), [
        node,
        focusManager
      ]);
      return (0, $parcel$interopDefault($aB6Cp$react)).createElement($a7a032acae3ddda9$var$FocusContext.Provider, {
        value
      }, (0, $parcel$interopDefault($aB6Cp$react)).createElement("span", {
        "data-focus-scope-start": true,
        hidden: true,
        ref: startRef
      }), children, (0, $parcel$interopDefault($aB6Cp$react)).createElement("span", {
        "data-focus-scope-end": true,
        hidden: true,
        ref: endRef
      }));
    }
    function $a7a032acae3ddda9$export$10c5169755ce7bd7() {
      var _useContext;
      return (_useContext = (0, $aB6Cp$react.useContext)($a7a032acae3ddda9$var$FocusContext)) === null || _useContext === void 0 ? void 0 : _useContext.focusManager;
    }
    function $a7a032acae3ddda9$var$createFocusManagerForScope(scopeRef) {
      return {
        focusNext(opts = {}) {
          let scope = scopeRef.current;
          let { from, tabbable, wrap, accept } = opts;
          let node = from || document.activeElement;
          let sentinel = scope[0].previousElementSibling;
          let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa($a7a032acae3ddda9$var$getScopeRoot(scope), {
            tabbable,
            accept
          }, scope);
          walker.currentNode = $a7a032acae3ddda9$var$isElementInScope(node, scope) ? node : sentinel;
          let nextNode = walker.nextNode();
          if (!nextNode && wrap) {
            walker.currentNode = sentinel;
            nextNode = walker.nextNode();
          }
          if (nextNode)
            $a7a032acae3ddda9$var$focusElement(nextNode, true);
          return nextNode;
        },
        focusPrevious(opts = {}) {
          let scope = scopeRef.current;
          let { from, tabbable, wrap, accept } = opts;
          let node = from || document.activeElement;
          let sentinel = scope[scope.length - 1].nextElementSibling;
          let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa($a7a032acae3ddda9$var$getScopeRoot(scope), {
            tabbable,
            accept
          }, scope);
          walker.currentNode = $a7a032acae3ddda9$var$isElementInScope(node, scope) ? node : sentinel;
          let previousNode = walker.previousNode();
          if (!previousNode && wrap) {
            walker.currentNode = sentinel;
            previousNode = walker.previousNode();
          }
          if (previousNode)
            $a7a032acae3ddda9$var$focusElement(previousNode, true);
          return previousNode;
        },
        focusFirst(opts = {}) {
          let scope = scopeRef.current;
          let { tabbable, accept } = opts;
          let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa($a7a032acae3ddda9$var$getScopeRoot(scope), {
            tabbable,
            accept
          }, scope);
          walker.currentNode = scope[0].previousElementSibling;
          let nextNode = walker.nextNode();
          if (nextNode)
            $a7a032acae3ddda9$var$focusElement(nextNode, true);
          return nextNode;
        },
        focusLast(opts = {}) {
          let scope = scopeRef.current;
          let { tabbable, accept } = opts;
          let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa($a7a032acae3ddda9$var$getScopeRoot(scope), {
            tabbable,
            accept
          }, scope);
          walker.currentNode = scope[scope.length - 1].nextElementSibling;
          let previousNode = walker.previousNode();
          if (previousNode)
            $a7a032acae3ddda9$var$focusElement(previousNode, true);
          return previousNode;
        }
      };
    }
    var $a7a032acae3ddda9$var$focusableElements = [
      "input:not([disabled]):not([type=hidden])",
      "select:not([disabled])",
      "textarea:not([disabled])",
      "button:not([disabled])",
      "a[href]",
      "area[href]",
      "summary",
      "iframe",
      "object",
      "embed",
      "audio[controls]",
      "video[controls]",
      "[contenteditable]"
    ];
    var $a7a032acae3ddda9$var$FOCUSABLE_ELEMENT_SELECTOR = $a7a032acae3ddda9$var$focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
    $a7a032acae3ddda9$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
    var $a7a032acae3ddda9$var$TABBABLE_ELEMENT_SELECTOR = $a7a032acae3ddda9$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
    function $a7a032acae3ddda9$var$getScopeRoot(scope) {
      return scope[0].parentElement;
    }
    function $a7a032acae3ddda9$var$shouldContainFocus(scopeRef) {
      let scope = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode($a7a032acae3ddda9$var$activeScope);
      while (scope && scope.scopeRef !== scopeRef) {
        if (scope.contain)
          return false;
        scope = scope.parent;
      }
      return true;
    }
    function $a7a032acae3ddda9$var$useFocusContainment(scopeRef, contain) {
      let focusedNode = (0, $aB6Cp$react.useRef)();
      let raf = (0, $aB6Cp$react.useRef)(null);
      (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
        let scope = scopeRef.current;
        if (!contain) {
          if (raf.current) {
            cancelAnimationFrame(raf.current);
            raf.current = null;
          }
          return;
        }
        let onKeyDown = (e) => {
          if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$a7a032acae3ddda9$var$shouldContainFocus(scopeRef))
            return;
          let focusedElement = document.activeElement;
          let scope2 = scopeRef.current;
          if (!$a7a032acae3ddda9$var$isElementInScope(focusedElement, scope2))
            return;
          let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa($a7a032acae3ddda9$var$getScopeRoot(scope2), {
            tabbable: true
          }, scope2);
          walker.currentNode = focusedElement;
          let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
          if (!nextElement) {
            walker.currentNode = e.shiftKey ? scope2[scope2.length - 1].nextElementSibling : scope2[0].previousElementSibling;
            nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
          }
          e.preventDefault();
          if (nextElement)
            $a7a032acae3ddda9$var$focusElement(nextElement, true);
        };
        let onFocus = (e) => {
          if ((!$a7a032acae3ddda9$var$activeScope || $a7a032acae3ddda9$var$isAncestorScope($a7a032acae3ddda9$var$activeScope, scopeRef)) && $a7a032acae3ddda9$var$isElementInScope(e.target, scopeRef.current)) {
            $a7a032acae3ddda9$var$activeScope = scopeRef;
            focusedNode.current = e.target;
          } else if ($a7a032acae3ddda9$var$shouldContainFocus(scopeRef) && !$a7a032acae3ddda9$var$isElementInChildScope(e.target, scopeRef)) {
            if (focusedNode.current)
              focusedNode.current.focus();
            else if ($a7a032acae3ddda9$var$activeScope)
              $a7a032acae3ddda9$var$focusFirstInScope($a7a032acae3ddda9$var$activeScope.current);
          } else if ($a7a032acae3ddda9$var$shouldContainFocus(scopeRef))
            focusedNode.current = e.target;
        };
        let onBlur = (e) => {
          if (raf.current)
            cancelAnimationFrame(raf.current);
          raf.current = requestAnimationFrame(() => {
            if ($a7a032acae3ddda9$var$shouldContainFocus(scopeRef) && !$a7a032acae3ddda9$var$isElementInChildScope(document.activeElement, scopeRef)) {
              $a7a032acae3ddda9$var$activeScope = scopeRef;
              if (document.body.contains(e.target)) {
                focusedNode.current = e.target;
                focusedNode.current.focus();
              } else if ($a7a032acae3ddda9$var$activeScope)
                $a7a032acae3ddda9$var$focusFirstInScope($a7a032acae3ddda9$var$activeScope.current);
            }
          });
        };
        document.addEventListener("keydown", onKeyDown, false);
        document.addEventListener("focusin", onFocus, false);
        scope.forEach((element) => element.addEventListener("focusin", onFocus, false));
        scope.forEach((element) => element.addEventListener("focusout", onBlur, false));
        return () => {
          document.removeEventListener("keydown", onKeyDown, false);
          document.removeEventListener("focusin", onFocus, false);
          scope.forEach((element) => element.removeEventListener("focusin", onFocus, false));
          scope.forEach((element) => element.removeEventListener("focusout", onBlur, false));
        };
      }, [
        scopeRef,
        contain
      ]);
      (0, $aB6Cp$react.useEffect)(() => {
        return () => {
          if (raf.current)
            cancelAnimationFrame(raf.current);
        };
      }, [
        raf
      ]);
    }
    function $a7a032acae3ddda9$var$isElementInAnyScope(element) {
      return $a7a032acae3ddda9$var$isElementInChildScope(element);
    }
    function $a7a032acae3ddda9$var$isElementInScope(element, scope) {
      return scope.some((node) => node.contains(element));
    }
    function $a7a032acae3ddda9$var$isElementInChildScope(element, scope = null) {
      if (element instanceof Element && element.closest("[data-react-aria-top-layer]"))
        return true;
      for (let { scopeRef: s } of $a7a032acae3ddda9$export$d06fae2ee68b101e.traverse($a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scope))) {
        if ($a7a032acae3ddda9$var$isElementInScope(element, s.current))
          return true;
      }
      return false;
    }
    function $a7a032acae3ddda9$export$1258395f99bf9cbf(element) {
      return $a7a032acae3ddda9$var$isElementInChildScope(element, $a7a032acae3ddda9$var$activeScope);
    }
    function $a7a032acae3ddda9$var$isAncestorScope(ancestor, scope) {
      var _focusScopeTree_getTreeNode;
      let parent = (_focusScopeTree_getTreeNode = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;
      while (parent) {
        if (parent.scopeRef === ancestor)
          return true;
        parent = parent.parent;
      }
      return false;
    }
    function $a7a032acae3ddda9$var$focusElement(element, scroll = false) {
      if (element != null && !scroll)
        try {
          (0, $1c7f9157d722357d$export$80f3e147d781571c)(element);
        } catch (err) {
        }
      else if (element != null)
        try {
          element.focus();
        } catch (err1) {
        }
    }
    function $a7a032acae3ddda9$var$focusFirstInScope(scope, tabbable = true) {
      let sentinel = scope[0].previousElementSibling;
      let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa($a7a032acae3ddda9$var$getScopeRoot(scope), {
        tabbable
      }, scope);
      walker.currentNode = sentinel;
      let nextNode = walker.nextNode();
      if (tabbable && !nextNode) {
        walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa($a7a032acae3ddda9$var$getScopeRoot(scope), {
          tabbable: false
        }, scope);
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
      }
      $a7a032acae3ddda9$var$focusElement(nextNode);
    }
    function $a7a032acae3ddda9$var$useAutoFocus(scopeRef, autoFocus) {
      const autoFocusRef = (0, $parcel$interopDefault($aB6Cp$react)).useRef(autoFocus);
      (0, $aB6Cp$react.useEffect)(() => {
        if (autoFocusRef.current) {
          $a7a032acae3ddda9$var$activeScope = scopeRef;
          if (!$a7a032acae3ddda9$var$isElementInScope(document.activeElement, $a7a032acae3ddda9$var$activeScope.current))
            $a7a032acae3ddda9$var$focusFirstInScope(scopeRef.current);
        }
        autoFocusRef.current = false;
      }, [
        scopeRef
      ]);
    }
    function $a7a032acae3ddda9$var$useActiveScopeTracker(scopeRef, restore, contain) {
      (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
        if (restore || contain)
          return;
        let scope = scopeRef.current;
        let onFocus = (e) => {
          let target = e.target;
          if ($a7a032acae3ddda9$var$isElementInScope(target, scopeRef.current))
            $a7a032acae3ddda9$var$activeScope = scopeRef;
          else if (!$a7a032acae3ddda9$var$isElementInAnyScope(target))
            $a7a032acae3ddda9$var$activeScope = null;
        };
        document.addEventListener("focusin", onFocus, false);
        scope.forEach((element) => element.addEventListener("focusin", onFocus, false));
        return () => {
          document.removeEventListener("focusin", onFocus, false);
          scope.forEach((element) => element.removeEventListener("focusin", onFocus, false));
        };
      }, [
        scopeRef,
        restore,
        contain
      ]);
    }
    function $a7a032acae3ddda9$var$shouldRestoreFocus(scopeRef) {
      let scope = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode($a7a032acae3ddda9$var$activeScope);
      while (scope && scope.scopeRef !== scopeRef) {
        if (scope.nodeToRestore)
          return false;
        scope = scope.parent;
      }
      return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;
    }
    function $a7a032acae3ddda9$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
      const nodeToRestoreRef = (0, $aB6Cp$react.useRef)(typeof document !== "undefined" ? document.activeElement : null);
      (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
        let scope = scopeRef.current;
        if (!restoreFocus || contain)
          return;
        let onFocus = () => {
          if ((!$a7a032acae3ddda9$var$activeScope || $a7a032acae3ddda9$var$isAncestorScope($a7a032acae3ddda9$var$activeScope, scopeRef)) && $a7a032acae3ddda9$var$isElementInScope(document.activeElement, scopeRef.current))
            $a7a032acae3ddda9$var$activeScope = scopeRef;
        };
        document.addEventListener("focusin", onFocus, false);
        scope.forEach((element) => element.addEventListener("focusin", onFocus, false));
        return () => {
          document.removeEventListener("focusin", onFocus, false);
          scope.forEach((element) => element.removeEventListener("focusin", onFocus, false));
        };
      }, [
        scopeRef,
        contain
      ]);
      (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
        if (!restoreFocus)
          return;
        $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;
        let onKeyDown = (e) => {
          if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey)
            return;
          let focusedElement = document.activeElement;
          if (!$a7a032acae3ddda9$var$isElementInScope(focusedElement, scopeRef.current))
            return;
          let nodeToRestore = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;
          let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa(document.body, {
            tabbable: true
          });
          walker.currentNode = focusedElement;
          let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
          if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {
            nodeToRestore = null;
            $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = null;
          }
          if ((!nextElement || !$a7a032acae3ddda9$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {
            walker.currentNode = nodeToRestore;
            do
              nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
            while ($a7a032acae3ddda9$var$isElementInScope(nextElement, scopeRef.current));
            e.preventDefault();
            e.stopPropagation();
            if (nextElement)
              $a7a032acae3ddda9$var$focusElement(nextElement, true);
            else if (!$a7a032acae3ddda9$var$isElementInAnyScope(nodeToRestore))
              focusedElement.blur();
            else
              $a7a032acae3ddda9$var$focusElement(nodeToRestore, true);
          }
        };
        if (!contain)
          document.addEventListener("keydown", onKeyDown, true);
        return () => {
          if (!contain)
            document.removeEventListener("keydown", onKeyDown, true);
          let nodeToRestore = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;
          if (restoreFocus && nodeToRestore && // eslint-disable-next-line react-hooks/exhaustive-deps
          ($a7a032acae3ddda9$var$isElementInScope(document.activeElement, scopeRef.current) || document.activeElement === document.body && $a7a032acae3ddda9$var$shouldRestoreFocus(scopeRef))) {
            let clonedTree = $a7a032acae3ddda9$export$d06fae2ee68b101e.clone();
            requestAnimationFrame(() => {
              if (document.activeElement === document.body) {
                let treeNode = clonedTree.getTreeNode(scopeRef);
                while (treeNode) {
                  if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {
                    $a7a032acae3ddda9$var$focusElement(treeNode.nodeToRestore);
                    return;
                  }
                  treeNode = treeNode.parent;
                }
                treeNode = clonedTree.getTreeNode(scopeRef);
                while (treeNode) {
                  if (treeNode.scopeRef && $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {
                    $a7a032acae3ddda9$var$focusFirstInScope(treeNode.scopeRef.current, true);
                    return;
                  }
                  treeNode = treeNode.parent;
                }
              }
            });
          }
        };
      }, [
        scopeRef,
        restoreFocus,
        contain
      ]);
    }
    function $a7a032acae3ddda9$export$2d6ec8fc375ceafa(root, opts, scope) {
      let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $a7a032acae3ddda9$var$TABBABLE_ELEMENT_SELECTOR : $a7a032acae3ddda9$var$FOCUSABLE_ELEMENT_SELECTOR;
      let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
        acceptNode(node) {
          var _opts_from;
          if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node))
            return NodeFilter.FILTER_REJECT;
          if (node.matches(selector) && (0, $d5156037ad898a4d$export$e989c0fffaa6b27a)(node) && (!scope || $a7a032acae3ddda9$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node)))
            return NodeFilter.FILTER_ACCEPT;
          return NodeFilter.FILTER_SKIP;
        }
      });
      if (opts === null || opts === void 0 ? void 0 : opts.from)
        walker.currentNode = opts.from;
      return walker;
    }
    function $a7a032acae3ddda9$export$c5251b9e124bf29(ref, defaultOptions = {}) {
      return {
        focusNext(opts = {}) {
          let root = ref.current;
          if (!root)
            return;
          let { from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept } = opts;
          let node = from || document.activeElement;
          let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa(root, {
            tabbable,
            accept
          });
          if (root.contains(node))
            walker.currentNode = node;
          let nextNode = walker.nextNode();
          if (!nextNode && wrap) {
            walker.currentNode = root;
            nextNode = walker.nextNode();
          }
          if (nextNode)
            $a7a032acae3ddda9$var$focusElement(nextNode, true);
          return nextNode;
        },
        focusPrevious(opts = defaultOptions) {
          let root = ref.current;
          if (!root)
            return;
          let { from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept } = opts;
          let node = from || document.activeElement;
          let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa(root, {
            tabbable,
            accept
          });
          if (root.contains(node))
            walker.currentNode = node;
          else {
            let next = $a7a032acae3ddda9$var$last(walker);
            if (next)
              $a7a032acae3ddda9$var$focusElement(next, true);
            return next;
          }
          let previousNode = walker.previousNode();
          if (!previousNode && wrap) {
            walker.currentNode = root;
            previousNode = $a7a032acae3ddda9$var$last(walker);
          }
          if (previousNode)
            $a7a032acae3ddda9$var$focusElement(previousNode, true);
          return previousNode;
        },
        focusFirst(opts = defaultOptions) {
          let root = ref.current;
          if (!root)
            return;
          let { tabbable = defaultOptions.tabbable, accept = defaultOptions.accept } = opts;
          let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa(root, {
            tabbable,
            accept
          });
          let nextNode = walker.nextNode();
          if (nextNode)
            $a7a032acae3ddda9$var$focusElement(nextNode, true);
          return nextNode;
        },
        focusLast(opts = defaultOptions) {
          let root = ref.current;
          if (!root)
            return;
          let { tabbable = defaultOptions.tabbable, accept = defaultOptions.accept } = opts;
          let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa(root, {
            tabbable,
            accept
          });
          let next = $a7a032acae3ddda9$var$last(walker);
          if (next)
            $a7a032acae3ddda9$var$focusElement(next, true);
          return next;
        }
      };
    }
    function $a7a032acae3ddda9$var$last(walker) {
      let next;
      let last;
      do {
        last = walker.lastChild();
        if (last)
          next = last;
      } while (last);
      return next;
    }
    var $a7a032acae3ddda9$var$Tree = class _$a7a032acae3ddda9$var$Tree {
      get size() {
        return this.fastMap.size;
      }
      getTreeNode(data) {
        return this.fastMap.get(data);
      }
      addTreeNode(scopeRef, parent, nodeToRestore) {
        let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);
        let node = new $a7a032acae3ddda9$var$TreeNode({
          scopeRef
        });
        parentNode.addChild(node);
        node.parent = parentNode;
        this.fastMap.set(scopeRef, node);
        if (nodeToRestore)
          node.nodeToRestore = nodeToRestore;
      }
      addNode(node) {
        this.fastMap.set(node.scopeRef, node);
      }
      removeTreeNode(scopeRef) {
        if (scopeRef === null)
          return;
        let node = this.fastMap.get(scopeRef);
        let parentNode = node.parent;
        for (let current of this.traverse())
          if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef.current && $a7a032acae3ddda9$var$isElementInScope(current.nodeToRestore, node.scopeRef.current))
            current.nodeToRestore = node.nodeToRestore;
        let children = node.children;
        parentNode.removeChild(node);
        if (children.size > 0)
          children.forEach((child) => parentNode.addChild(child));
        this.fastMap.delete(node.scopeRef);
      }
      // Pre Order Depth First
      *traverse(node = this.root) {
        if (node.scopeRef != null)
          yield node;
        if (node.children.size > 0)
          for (let child of node.children)
            yield* this.traverse(child);
      }
      clone() {
        let newTree = new _$a7a032acae3ddda9$var$Tree();
        for (let node of this.traverse())
          newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);
        return newTree;
      }
      constructor() {
        (0, $parcel$interopDefault($aB6Cp$swchelperslib_define_propertyjs))(this, "fastMap", /* @__PURE__ */ new Map());
        this.root = new $a7a032acae3ddda9$var$TreeNode({
          scopeRef: null
        });
        this.fastMap.set(null, this.root);
      }
    };
    var $a7a032acae3ddda9$var$TreeNode = class {
      addChild(node) {
        this.children.add(node);
        node.parent = this;
      }
      removeChild(node) {
        this.children.delete(node);
        node.parent = void 0;
      }
      constructor(props) {
        (0, $parcel$interopDefault($aB6Cp$swchelperslib_define_propertyjs))(this, "children", /* @__PURE__ */ new Set());
        (0, $parcel$interopDefault($aB6Cp$swchelperslib_define_propertyjs))(this, "contain", false);
        this.scopeRef = props.scopeRef;
      }
    };
    var $a7a032acae3ddda9$export$d06fae2ee68b101e = new $a7a032acae3ddda9$var$Tree();
    function $581a96d6eb128c1b$export$4e328f61c538687f(props = {}) {
      let { autoFocus = false, isTextInput, within } = props;
      let state = (0, $aB6Cp$react.useRef)({
        isFocused: false,
        isFocusVisible: autoFocus || (0, $aB6Cp$reactariainteractions.isFocusVisible)()
      });
      let [isFocused, setFocused] = (0, $aB6Cp$react.useState)(false);
      let [isFocusVisibleState, setFocusVisible] = (0, $aB6Cp$react.useState)(() => state.current.isFocused && state.current.isFocusVisible);
      let updateState = (0, $aB6Cp$react.useCallback)(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);
      let onFocusChange = (0, $aB6Cp$react.useCallback)((isFocused2) => {
        state.current.isFocused = isFocused2;
        setFocused(isFocused2);
        updateState();
      }, [
        updateState
      ]);
      (0, $aB6Cp$reactariainteractions.useFocusVisibleListener)((isFocusVisible) => {
        state.current.isFocusVisible = isFocusVisible;
        updateState();
      }, [], {
        isTextInput
      });
      let { focusProps } = (0, $aB6Cp$reactariainteractions.useFocus)({
        isDisabled: within,
        onFocusChange
      });
      let { focusWithinProps } = (0, $aB6Cp$reactariainteractions.useFocusWithin)({
        isDisabled: !within,
        onFocusWithinChange: onFocusChange
      });
      return {
        isFocused,
        isFocusVisible: state.current.isFocused && isFocusVisibleState,
        focusProps: within ? focusWithinProps : focusProps
      };
    }
    function $dfd8c70b928eb1b3$export$1a38b4ad7f578e1d(props) {
      let { children, focusClass, focusRingClass } = props;
      let { isFocused, isFocusVisible, focusProps } = (0, $581a96d6eb128c1b$export$4e328f61c538687f)(props);
      let child = (0, $parcel$interopDefault($aB6Cp$react)).Children.only(children);
      return (0, $parcel$interopDefault($aB6Cp$react)).cloneElement(child, (0, $aB6Cp$reactariautils.mergeProps)(child.props, {
        ...focusProps,
        className: (0, $parcel$interopDefault($aB6Cp$clsx))({
          [focusClass || ""]: isFocused,
          [focusRingClass || ""]: isFocusVisible
        })
      }));
    }
    var $fb504d83237fd6ac$var$FocusableContext = (0, $parcel$interopDefault($aB6Cp$react)).createContext(null);
    function $fb504d83237fd6ac$var$useFocusableContext(ref) {
      let context = (0, $aB6Cp$react.useContext)($fb504d83237fd6ac$var$FocusableContext) || {};
      (0, $aB6Cp$reactariautils.useSyncRef)(context, ref);
      let { ref: _, ...otherProps } = context;
      return otherProps;
    }
    function $fb504d83237fd6ac$var$FocusableProvider(props, ref) {
      let { children, ...otherProps } = props;
      let context = {
        ...otherProps,
        ref
      };
      return (0, $parcel$interopDefault($aB6Cp$react)).createElement($fb504d83237fd6ac$var$FocusableContext.Provider, {
        value: context
      }, children);
    }
    var $fb504d83237fd6ac$export$13f3202a3e5ddd5 = (0, $parcel$interopDefault($aB6Cp$react)).forwardRef($fb504d83237fd6ac$var$FocusableProvider);
    function $fb504d83237fd6ac$export$4c014de7c8940b4c(props, domRef) {
      let { focusProps } = (0, $aB6Cp$reactariainteractions.useFocus)(props);
      let { keyboardProps } = (0, $aB6Cp$reactariainteractions.useKeyboard)(props);
      let interactions = (0, $aB6Cp$reactariautils.mergeProps)(focusProps, keyboardProps);
      let domProps = $fb504d83237fd6ac$var$useFocusableContext(domRef);
      let interactionProps = props.isDisabled ? {} : domProps;
      let autoFocusRef = (0, $aB6Cp$react.useRef)(props.autoFocus);
      (0, $aB6Cp$react.useEffect)(() => {
        if (autoFocusRef.current && domRef.current)
          (0, $1c7f9157d722357d$export$80f3e147d781571c)(domRef.current);
        autoFocusRef.current = false;
      }, [
        domRef
      ]);
      return {
        focusableProps: (0, $aB6Cp$reactariautils.mergeProps)({
          ...interactions,
          tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : void 0
        }, interactionProps)
      };
    }
    function $259c6413a286f2e6$export$eac1895992b9f3d6(ref, options) {
      let isDisabled = options === null || options === void 0 ? void 0 : options.isDisabled;
      let [hasTabbableChild, setHasTabbableChild] = (0, $aB6Cp$react.useState)(false);
      (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
        if ((ref === null || ref === void 0 ? void 0 : ref.current) && !isDisabled) {
          let update = () => {
            if (ref.current) {
              let walker = (0, $a7a032acae3ddda9$export$2d6ec8fc375ceafa)(ref.current, {
                tabbable: true
              });
              setHasTabbableChild(!!walker.nextNode());
            }
          };
          update();
          let observer = new MutationObserver(update);
          observer.observe(ref.current, {
            subtree: true,
            childList: true,
            attributes: true,
            attributeFilter: [
              "tabIndex",
              "disabled"
            ]
          });
          return () => {
            observer.disconnect();
          };
        }
      });
      return isDisabled ? false : hasTabbableChild;
    }
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports, module) {
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    module.exports = arrayMap;
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module) {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, "Map");
    module.exports = Map2;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module) {
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  }
});

// node_modules/lodash/_arrayEach.js
var require_arrayEach = __commonJS({
  "node_modules/lodash/_arrayEach.js"(exports, module) {
    function arrayEach(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    module.exports = arrayEach;
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module) {
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module.exports = defineProperty;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module) {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    module.exports = baseAssignValue;
  }
});

// node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "node_modules/lodash/_assignValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  "node_modules/lodash/_copyObject.js"(exports, module) {
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    module.exports = copyObject;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module) {
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module.exports = baseTimes;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module) {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module.exports = overArg;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module) {
    var isFunction = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    module.exports = isArrayLike;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module.exports = keys;
  }
});

// node_modules/lodash/_baseAssign.js
var require_baseAssign = __commonJS({
  "node_modules/lodash/_baseAssign.js"(exports, module) {
    var copyObject = require_copyObject();
    var keys = require_keys();
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    module.exports = baseAssign;
  }
});

// node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  "node_modules/lodash/_nativeKeysIn.js"(exports, module) {
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = nativeKeysIn;
  }
});

// node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  "node_modules/lodash/_baseKeysIn.js"(exports, module) {
    var isObject = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeysIn;
  }
});

// node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  "node_modules/lodash/keysIn.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module.exports = keysIn;
  }
});

// node_modules/lodash/_baseAssignIn.js
var require_baseAssignIn = __commonJS({
  "node_modules/lodash/_baseAssignIn.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }
    module.exports = baseAssignIn;
  }
});

// node_modules/lodash/_cloneBuffer.js
var require_cloneBuffer = __commonJS({
  "node_modules/lodash/_cloneBuffer.js"(exports, module) {
    var root = require_root();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  }
});

// node_modules/lodash/_copyArray.js
var require_copyArray = __commonJS({
  "node_modules/lodash/_copyArray.js"(exports, module) {
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    module.exports = copyArray;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module) {
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module) {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module.exports = getSymbols;
  }
});

// node_modules/lodash/_copySymbols.js
var require_copySymbols = __commonJS({
  "node_modules/lodash/_copySymbols.js"(exports, module) {
    var copyObject = require_copyObject();
    var getSymbols = require_getSymbols();
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    module.exports = copySymbols;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module) {
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    module.exports = arrayPush;
  }
});

// node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "node_modules/lodash/_getPrototype.js"(exports, module) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module.exports = getPrototype;
  }
});

// node_modules/lodash/_getSymbolsIn.js
var require_getSymbolsIn = __commonJS({
  "node_modules/lodash/_getSymbolsIn.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var getPrototype = require_getPrototype();
    var getSymbols = require_getSymbols();
    var stubArray = require_stubArray();
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };
    module.exports = getSymbolsIn;
  }
});

// node_modules/lodash/_copySymbolsIn.js
var require_copySymbolsIn = __commonJS({
  "node_modules/lodash/_copySymbolsIn.js"(exports, module) {
    var copyObject = require_copyObject();
    var getSymbolsIn = require_getSymbolsIn();
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }
    module.exports = copySymbolsIn;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isArray = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module.exports = getAllKeys;
  }
});

// node_modules/lodash/_getAllKeysIn.js
var require_getAllKeysIn = __commonJS({
  "node_modules/lodash/_getAllKeysIn.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbolsIn = require_getSymbolsIn();
    var keysIn = require_keysIn();
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    module.exports = getAllKeysIn;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, "DataView");
    module.exports = DataView;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module.exports = Set2;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap2 = getNative(root, "WeakMap");
    module.exports = WeakMap2;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module) {
    var DataView = require_DataView();
    var Map2 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap2 = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  }
});

// node_modules/lodash/_initCloneArray.js
var require_initCloneArray = __commonJS({
  "node_modules/lodash/_initCloneArray.js"(exports, module) {
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function initCloneArray(array) {
      var length = array.length, result = new array.constructor(length);
      if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    module.exports = initCloneArray;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module) {
    var root = require_root();
    var Uint8Array = root.Uint8Array;
    module.exports = Uint8Array;
  }
});

// node_modules/lodash/_cloneArrayBuffer.js
var require_cloneArrayBuffer = __commonJS({
  "node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
    var Uint8Array = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }
    module.exports = cloneArrayBuffer;
  }
});

// node_modules/lodash/_cloneDataView.js
var require_cloneDataView = __commonJS({
  "node_modules/lodash/_cloneDataView.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    module.exports = cloneDataView;
  }
});

// node_modules/lodash/_cloneRegExp.js
var require_cloneRegExp = __commonJS({
  "node_modules/lodash/_cloneRegExp.js"(exports, module) {
    var reFlags = /\w*$/;
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    module.exports = cloneRegExp;
  }
});

// node_modules/lodash/_cloneSymbol.js
var require_cloneSymbol = __commonJS({
  "node_modules/lodash/_cloneSymbol.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    module.exports = cloneSymbol;
  }
});

// node_modules/lodash/_cloneTypedArray.js
var require_cloneTypedArray = __commonJS({
  "node_modules/lodash/_cloneTypedArray.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    module.exports = cloneTypedArray;
  }
});

// node_modules/lodash/_initCloneByTag.js
var require_initCloneByTag = __commonJS({
  "node_modules/lodash/_initCloneByTag.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    var cloneDataView = require_cloneDataView();
    var cloneRegExp = require_cloneRegExp();
    var cloneSymbol = require_cloneSymbol();
    var cloneTypedArray = require_cloneTypedArray();
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Ctor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return new Ctor();
        case numberTag:
        case stringTag:
          return new Ctor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return new Ctor();
        case symbolTag:
          return cloneSymbol(object);
      }
    }
    module.exports = initCloneByTag;
  }
});

// node_modules/lodash/_baseCreate.js
var require_baseCreate = __commonJS({
  "node_modules/lodash/_baseCreate.js"(exports, module) {
    var isObject = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = function() {
      function object() {
      }
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    module.exports = baseCreate;
  }
});

// node_modules/lodash/_initCloneObject.js
var require_initCloneObject = __commonJS({
  "node_modules/lodash/_initCloneObject.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    module.exports = initCloneObject;
  }
});

// node_modules/lodash/_baseIsMap.js
var require_baseIsMap = __commonJS({
  "node_modules/lodash/_baseIsMap.js"(exports, module) {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var mapTag = "[object Map]";
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }
    module.exports = baseIsMap;
  }
});

// node_modules/lodash/isMap.js
var require_isMap = __commonJS({
  "node_modules/lodash/isMap.js"(exports, module) {
    var baseIsMap = require_baseIsMap();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsMap = nodeUtil && nodeUtil.isMap;
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
    module.exports = isMap;
  }
});

// node_modules/lodash/_baseIsSet.js
var require_baseIsSet = __commonJS({
  "node_modules/lodash/_baseIsSet.js"(exports, module) {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var setTag = "[object Set]";
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }
    module.exports = baseIsSet;
  }
});

// node_modules/lodash/isSet.js
var require_isSet = __commonJS({
  "node_modules/lodash/isSet.js"(exports, module) {
    var baseIsSet = require_baseIsSet();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsSet = nodeUtil && nodeUtil.isSet;
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    module.exports = isSet;
  }
});

// node_modules/lodash/_baseClone.js
var require_baseClone = __commonJS({
  "node_modules/lodash/_baseClone.js"(exports, module) {
    var Stack = require_Stack();
    var arrayEach = require_arrayEach();
    var assignValue = require_assignValue();
    var baseAssign = require_baseAssign();
    var baseAssignIn = require_baseAssignIn();
    var cloneBuffer = require_cloneBuffer();
    var copyArray = require_copyArray();
    var copySymbols = require_copySymbols();
    var copySymbolsIn = require_copySymbolsIn();
    var getAllKeys = require_getAllKeys();
    var getAllKeysIn = require_getAllKeysIn();
    var getTag = require_getTag();
    var initCloneArray = require_initCloneArray();
    var initCloneByTag = require_initCloneByTag();
    var initCloneObject = require_initCloneObject();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isMap = require_isMap();
    var isObject = require_isObject();
    var isSet = require_isSet();
    var keys = require_keys();
    var keysIn = require_keysIn();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_FLAT_FLAG = 2;
    var CLONE_SYMBOLS_FLAG = 4;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key2) {
          result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
      }
      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
      var props = isArr ? void 0 : keysFunc(value);
      arrayEach(props || value, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value[key2];
        }
        assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
      return result;
    }
    module.exports = baseClone;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/lodash/_isKey.js"(exports, module) {
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    module.exports = isKey;
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports, module) {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    module.exports = memoize;
  }
});

// node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/lodash/_memoizeCapped.js"(exports, module) {
    var memoize = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    module.exports = memoizeCapped;
  }
});

// node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/lodash/_stringToPath.js"(exports, module) {
    var memoizeCapped = require_memoizeCapped();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    module.exports = stringToPath;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = baseToString;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports, module) {
    var baseToString = require_baseToString();
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    module.exports = toString;
  }
});

// node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/lodash/_castPath.js"(exports, module) {
    var isArray = require_isArray();
    var isKey = require_isKey();
    var stringToPath = require_stringToPath();
    var toString = require_toString();
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }
    module.exports = castPath;
  }
});

// node_modules/lodash/last.js
var require_last = __commonJS({
  "node_modules/lodash/last.js"(exports, module) {
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : void 0;
    }
    module.exports = last;
  }
});

// node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/lodash/_toKey.js"(exports, module) {
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = toKey;
  }
});

// node_modules/lodash/_baseGet.js
var require_baseGet = __commonJS({
  "node_modules/lodash/_baseGet.js"(exports, module) {
    var castPath = require_castPath();
    var toKey = require_toKey();
    function baseGet(object, path) {
      path = castPath(path, object);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    module.exports = baseGet;
  }
});

// node_modules/lodash/_baseSlice.js
var require_baseSlice = __commonJS({
  "node_modules/lodash/_baseSlice.js"(exports, module) {
    function baseSlice(array, start, end) {
      var index = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    module.exports = baseSlice;
  }
});

// node_modules/lodash/_parent.js
var require_parent = __commonJS({
  "node_modules/lodash/_parent.js"(exports, module) {
    var baseGet = require_baseGet();
    var baseSlice = require_baseSlice();
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }
    module.exports = parent;
  }
});

// node_modules/lodash/_baseUnset.js
var require_baseUnset = __commonJS({
  "node_modules/lodash/_baseUnset.js"(exports, module) {
    var castPath = require_castPath();
    var last = require_last();
    var parent = require_parent();
    var toKey = require_toKey();
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }
    module.exports = baseUnset;
  }
});

// node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/lodash/isPlainObject.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module.exports = isPlainObject;
  }
});

// node_modules/lodash/_customOmitClone.js
var require_customOmitClone = __commonJS({
  "node_modules/lodash/_customOmitClone.js"(exports, module) {
    var isPlainObject = require_isPlainObject();
    function customOmitClone(value) {
      return isPlainObject(value) ? void 0 : value;
    }
    module.exports = customOmitClone;
  }
});

// node_modules/lodash/_isFlattenable.js
var require_isFlattenable = __commonJS({
  "node_modules/lodash/_isFlattenable.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    module.exports = isFlattenable;
  }
});

// node_modules/lodash/_baseFlatten.js
var require_baseFlatten = __commonJS({
  "node_modules/lodash/_baseFlatten.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isFlattenable = require_isFlattenable();
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    module.exports = baseFlatten;
  }
});

// node_modules/lodash/flatten.js
var require_flatten = __commonJS({
  "node_modules/lodash/flatten.js"(exports, module) {
    var baseFlatten = require_baseFlatten();
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }
    module.exports = flatten;
  }
});

// node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "node_modules/lodash/_apply.js"(exports, module) {
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply;
  }
});

// node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "node_modules/lodash/_overRest.js"(exports, module) {
    var apply = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start, transform) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  }
});

// node_modules/lodash/constant.js
var require_constant = __commonJS({
  "node_modules/lodash/constant.js"(exports, module) {
    function constant(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports, module) {
    function identity(value) {
      return value;
    }
    module.exports = identity;
  }
});

// node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "node_modules/lodash/_baseSetToString.js"(exports, module) {
    var constant = require_constant();
    var defineProperty = require_defineProperty();
    var identity = require_identity();
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    module.exports = baseSetToString;
  }
});

// node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "node_modules/lodash/_shortOut.js"(exports, module) {
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  }
});

// node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "node_modules/lodash/_setToString.js"(exports, module) {
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  }
});

// node_modules/lodash/_flatRest.js
var require_flatRest = __commonJS({
  "node_modules/lodash/_flatRest.js"(exports, module) {
    var flatten = require_flatten();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function flatRest(func) {
      return setToString(overRest(func, void 0, flatten), func + "");
    }
    module.exports = flatRest;
  }
});

// node_modules/lodash/omit.js
var require_omit = __commonJS({
  "node_modules/lodash/omit.js"(exports, module) {
    var arrayMap = require_arrayMap();
    var baseClone = require_baseClone();
    var baseUnset = require_baseUnset();
    var castPath = require_castPath();
    var copyObject = require_copyObject();
    var customOmitClone = require_customOmitClone();
    var flatRest = require_flatRest();
    var getAllKeysIn = require_getAllKeysIn();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_FLAT_FLAG = 2;
    var CLONE_SYMBOLS_FLAG = 4;
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });
    module.exports = omit;
  }
});

// node_modules/@apollo/space-kit/Button/button/ButtonIcon.js
var require_ButtonIcon = __commonJS({
  "node_modules/@apollo/space-kit/Button/button/ButtonIcon.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var core = (init_core_browser_esm(), __toCommonJS(core_browser_esm_exports));
    var React = require_react();
    var React__default = _interopDefault(React);
    var ButtonIcon = React__default.forwardRef(function(_a, ref) {
      var children = _a.children, className = _a.className, iconSize = _a.iconSize;
      return core.jsx("span", {
        className,
        ref,
        css: core.css({
          alignItems: "center",
          // This needs to be `inline-flex` and not the default of
          // `inline-block` to vertically center the icon automatically
          display: "inline-flex",
          height: iconSize,
          justifyContent: "center",
          // The `4px` will be on the right to separate the icon from the text
          width: iconSize
        })
      }, children);
    });
    exports.ButtonIcon = ButtonIcon;
  }
});

// node_modules/@apollo/space-kit/inputHeightDictionary-78849349.js
var require_inputHeightDictionary_78849349 = __commonJS({
  "node_modules/@apollo/space-kit/inputHeightDictionary-78849349.js"(exports) {
    "use strict";
    var inputHeightDictionary = {
      small: 28,
      standard: 36,
      large: 42
    };
    exports.inputHeightDictionary = inputHeightDictionary;
  }
});

// node_modules/@apollo/space-kit/TooltipContext-20cc2d3d.js
var require_TooltipContext_20cc2d3d = __commonJS({
  "node_modules/@apollo/space-kit/TooltipContext-20cc2d3d.js"(exports) {
    "use strict";
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var React = require_react();
    var React__default = _interopDefault(React);
    var defaultState = {
      descendsFromTooltip: false
    };
    var TooltipContext = React.createContext(void 0);
    var TooltipContextProvider = function(_a) {
      var children = _a.children, descendsFromTooltip = _a.descendsFromTooltip;
      var state = React.useMemo(function() {
        return {
          descendsFromTooltip: descendsFromTooltip !== null && descendsFromTooltip !== void 0 ? descendsFromTooltip : defaultState.descendsFromTooltip
        };
      }, [descendsFromTooltip]);
      return React.createElement(TooltipContext.Provider, {
        value: state
      }, children);
    };
    function useTooltipContext() {
      var _a;
      return (_a = React.useContext(TooltipContext)) !== null && _a !== void 0 ? _a : defaultState;
    }
    exports.TooltipContextProvider = TooltipContextProvider;
    exports.useTooltipContext = useTooltipContext;
  }
});

// node_modules/@apollo/space-kit/Button/Button.js
var require_Button = __commonJS({
  "node_modules/@apollo/space-kit/Button/Button.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var _tslib = require_tslib_bcbe0269();
    var core = (init_core_browser_esm(), __toCommonJS(core_browser_esm_exports));
    var React = require_react();
    var React__default = _interopDefault(React);
    require_fonts();
    var base$1 = require_base_91f9e1df();
    require_mono_a0d4bd30();
    var colors = require_colors();
    var assertUnreachable = require_assertUnreachable_698a501a();
    var index = require_SpaceKitProvider();
    require_findPaletteByColor();
    var getOffsetInPalette = require_getOffsetInPalette();
    var tinycolor = _interopDefault(require_tinycolor());
    var LoadingSpinner = require_LoadingSpinner();
    var focus = require_main5();
    var utils = require_main3();
    var omit = _interopDefault(require_omit());
    var ButtonIcon = require_ButtonIcon();
    var inputHeightDictionary = require_inputHeightDictionary_78849349();
    var TooltipContext = require_TooltipContext_20cc2d3d();
    var defaultColor = colors.colors.silver.light;
    function getTextColor(_a) {
      var color = _a.color, feel = _a.feel, theme = _a.theme, mode = _a.mode;
      if (color === colors.colors.white) {
        return colors.colors.grey.darker;
      }
      switch (feel) {
        case "raised":
          return !mode ? tinycolor.mostReadable(getHoverBackgroundColor({
            color,
            feel,
            theme
          }), [colors.colors.white, colors.colors.grey.darker], {
            level: "AA",
            size: "small"
          }).toString() : void 0;
        case "flat":
          if (color === defaultColor) {
            return theme === "dark" ? colors.colors.grey.light : colors.colors.grey.darker;
          }
          if (theme === "dark" && (!mode || mode === ":focus")) {
            return getOffsetInPalette.getOffsetInPalette(1, "lighter", color);
          }
          return color;
        default:
          throw assertUnreachable.assertUnreachable(feel);
      }
    }
    function getHeight(_a) {
      var size = _a.size;
      switch (size) {
        case "small":
          return 28;
        case "default":
        case "standard":
          return 36;
        case "large":
          return 42;
        default:
          throw assertUnreachable.assertUnreachable(size);
      }
    }
    function getHoverBackgroundColor(_a) {
      var color = _a.color, feel = _a.feel, theme = _a.theme;
      if (color === colors.colors.white) {
        return colors.colors.silver.light;
      }
      switch (feel) {
        case "flat":
          if (color === defaultColor) {
            return theme === "light" ? colors.colors.silver.light : colors.colors.grey.dark;
          }
          return getOffsetInPalette.getOffsetInPalette(Infinity, "lighter", color);
        case "raised":
          return getOffsetInPalette.getOffsetInPalette(1, "darker", color);
        default:
          throw assertUnreachable.assertUnreachable(feel);
      }
    }
    var Button = React__default.forwardRef(function(_a, ref) {
      var _b = _a.as, as = _b === void 0 ? core.jsx("button", null) : _b, children = _a.children, _c = _a.color, color = _c === void 0 ? defaultColor : _c, variant = _a.variant, endIcon = _a.endIcon, _d = _a.feel, feel = _d === void 0 ? "raised" : _d, iconProp = _a.icon, loading = _a.loading, _e = _a.size, size = _e === void 0 ? "standard" : _e, propTheme = _a.theme, passthroughProps = _tslib.__rest(_a, ["as", "children", "color", "variant", "endIcon", "feel", "icon", "loading", "size", "theme"]);
      if (size === "default") {
        size = "standard";
      }
      var _f = focus.useFocusRing(), isFocusVisible = _f.isFocusVisible, focusProps = _f.focusProps;
      var providerTheme = index.useSpaceKitProvider().theme;
      var theme = propTheme || providerTheme;
      var _g = React.useState(false), isPointerOver = _g[0], setIsPointerOver = _g[1];
      var mergedProps = utils.mergeProps(passthroughProps, as.props, focusProps, {
        ref
      });
      if (loading) {
        mergedProps.disabled = true;
      }
      var overrideDisabledBehavior = TooltipContext.useTooltipContext().descendsFromTooltip && isPointerOver && mergedProps.disabled;
      var onClick = function(event) {
        var _a2;
        if (mergedProps.disabled)
          return event.preventDefault();
        (_a2 = mergedProps.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(mergedProps, event);
      };
      var disabledStyles = {
        backgroundColor: feel === "flat" ? "transparent" : theme === "light" ? colors.colors.silver.light : colors.colors.grey.dark,
        boxShadow: "none",
        color: feel === "flat" && theme === "dark" ? colors.colors.grey.dark : colors.colors.grey.light
      };
      var focusedStyles = _tslib.__assign(_tslib.__assign({}, feel === "flat" && {
        backgroundColor: theme === "light" ? colors.colors.white : "#000",
        color: theme === "light" ? colors.colors.blue.base : colors.colors.blue.light
      }), {
        // The `box-shadow` property is copied directly from Zeplin for the
        // light theme. For the dark theme we use a variant of the color to
        // make the borders sharp.
        boxShadow: "0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 0 0 2px " + (theme === "light" || color === defaultColor || color === colors.colors.white ? "#bbdbff" : getOffsetInPalette.getOffsetInPalette(Infinity, "lighter", color)) + ", inset 0 0 0 1px " + (color === defaultColor || color === colors.colors.white ? "#2075d6" : getOffsetInPalette.getOffsetInPalette(1, "darker", color)) + ", inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)"
      });
      var icon = loading ? core.jsx(LoadingSpinner.LoadingSpinner, {
        size: "2xsmall",
        theme: theme === "light" ? "grayscale" : "dark"
      }) : iconProp;
      var iconSize = size === "small" ? 12 : size === "large" ? 24 : 16;
      var iconOnly = !children;
      if (variant === "fab") {
        if (!icon) {
          throw new TypeError("FAB buttons are required to have an `icon`");
        } else if (children) {
          throw new TypeError("FAB buttons cannot have children, only an `icon`");
        }
      }
      return core.jsx(core.ClassNames, null, function(_a2) {
        var cx = _a2.cx, css = _a2.css;
        var propsToPass = utils.mergeProps(
          // Omit `onClick` from `otherProps` beacuse we'll be conditionally
          // calling it in the `onClick` handler depending on `mergedProps.disabled`.
          // Also exclude `className` beacuse we'll be combining it on
          // our own with `cx`. This is necessary because `cx` allows for
          // emotion styles to be logically overwritten.
          omit(
            mergedProps,
            "className",
            "onClick",
            // If we're overriding the default disabled behavior, then strip
            // it out from the props we'll pass to the element.
            overrideDisabledBehavior ? "disabled" : ""
          ),
          {
            "aria-disabled": mergedProps.disabled,
            onClick,
            onPointerEnter: function() {
              setIsPointerOver(true);
            },
            onPointerLeave: function() {
              setIsPointerOver(false);
            },
            className: cx(css([
              {
                "&:focus": {
                  outline: 0
                }
              },
              _tslib.__assign(_tslib.__assign(_tslib.__assign(_tslib.__assign({
                backgroundColor: color === colors.colors.white ? colors.colors.white : feel === "raised" ? color : "transparent",
                borderRadius: variant === "fab" ? "100%" : 4,
                borderWidth: 0
              }, feel !== "flat" && {
                boxShadow: theme === "light" ? "0 1px 4px 0 rgba(18, 21, 26, 0.04), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)" : "0 0 0 1px rgba(18, 21, 26, 0.2), 0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 1px 0 0 rgba(18, 21, 26, 0.05)"
              }), {
                color: getTextColor({
                  color,
                  feel,
                  theme
                }),
                cursor: mergedProps.disabled ? "default" : "pointer",
                // Vertically center children
                display: "inline-flex",
                alignItems: "center",
                justifyContent: "center",
                height: getHeight({
                  size
                }),
                minWidth: iconOnly ? inputHeightDictionary.inputHeightDictionary[size === "default" ? "standard" : size] : endIcon ? 0 : size === "small" ? 76 : size === "default" || size === "standard" ? 100 : size === "large" ? 112 : assertUnreachable.assertUnreachable(size),
                // We have to set the Y padding because browsers (at least Chrome) has
                // a non-symmetrical vertical padding applied by default.
                paddingLeft: iconOnly ? 0 : 12,
                paddingRight: iconOnly ? 0 : endIcon ? 8 : 12
              }), size === "small" ? base$1.small : size === "large" ? base$1.large : base$1.base), {
                fontWeight: 600,
                // Disable the outline because we're setting a custom `:active` style
                outline: 0,
                textDecoration: "none",
                whiteSpace: "nowrap"
              }),
              // We need to also set the `:hover` on `:disabled` so it has a
              // higher specificity than any `:hover` classes passed in. This
              // also means that both of these need to be overriden if we want
              // to use a custom disabled color.
              mergedProps.disabled ? overrideDisabledBehavior ? disabledStyles : {
                "&[disabled], &[disabled]:hover": disabledStyles
              } : {
                ":hover, &[data-force-hover-state]": _tslib.__assign({
                  backgroundColor: getHoverBackgroundColor({
                    color,
                    feel,
                    theme
                  }),
                  color: getTextColor({
                    color,
                    feel,
                    theme,
                    mode: ":hover"
                  })
                }, feel !== "flat" && {
                  // The `box-shadow` property is copied directly from Zeplin
                  boxShadow: theme === "light" ? "0 5px 10px 0 rgba(18, 21, 26, 0.08), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)" : "0 0 0 1px rgba(18, 21, 26, 0.2), 0 5px 10px 0 rgba(18, 21, 26, 0.12), 0 1px 0 0 rgba(18, 21, 26, 0.05)"
                }),
                // This is kind of hacky behavior
                "&[data-force-focus-state]": focusedStyles,
                "&:active, &[data-force-active-state], &[aria-expanded=true]": _tslib.__assign(_tslib.__assign({}, getTextColor({
                  color,
                  feel,
                  theme,
                  mode: ":hover"
                }) && {
                  color: getTextColor({
                    color,
                    feel,
                    theme,
                    mode: ":active"
                  })
                }), {
                  backgroundColor: color === colors.colors.white ? colors.colors.white : feel === "raised" ? color : color === defaultColor ? theme === "dark" ? colors.colors.grey.darker : colors.colors.silver.base : getOffsetInPalette.getOffsetInPalette(2, "lighter", color),
                  // The `box-shadow` properties are copied directly from Zeplin
                  boxShadow: feel !== "flat" ? theme === "light" ? "inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05), inset 0 2px 2px 0 rgba(18, 21, 26, 0.12)" : "0 0 0 1px rgba(18, 21, 26, 0.2), 0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 -1px 0 0 rgba(18, 21, 26, 0.16), inset 0 1px 2px 0 rgba(18, 21, 26, 0.42)" : "none",
                  outline: "0"
                })
              }
            ]), mergedProps.className, isFocusVisible && css(focusedStyles)),
            children: core.jsx(React__default.Fragment, null, icon && core.jsx(ButtonIcon.ButtonIcon, {
              iconSize,
              className: css({
                margin: iconOnly ? 0 : "0 8px 0 0"
              })
            }, icon), children, endIcon && !loading && core.jsx(ButtonIcon.ButtonIcon, {
              iconSize,
              className: css({
                margin: iconOnly ? 0 : "0 0 0 6px"
              })
            }, endIcon))
          }
        );
        return React__default.cloneElement(as, propsToPass);
      });
    });
    exports.Button = Button;
  }
});

// node_modules/@apollo/space-kit/Button/index.js
var require_Button2 = __commonJS({
  "node_modules/@apollo/space-kit/Button/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    require_tslib_bcbe0269();
    init_core_browser_esm();
    require_react();
    require_fonts();
    require_base_91f9e1df();
    require_mono_a0d4bd30();
    require_colors();
    require_assertUnreachable_698a501a();
    require_SpaceKitProvider();
    require_findPaletteByColor();
    require_getOffsetInPalette();
    require_tinycolor();
    require_LoadingSpinner();
    require_main5();
    require_main3();
    require_omit();
    require_ButtonIcon();
    require_inputHeightDictionary_78849349();
    require_TooltipContext_20cc2d3d();
    var Button = require_Button();
    exports.Button = Button.Button;
  }
});
export default require_Button2();
//# sourceMappingURL=@apollo_space-kit_Button.js.map
